name: Update function configuration

on:
  workflow_dispatch:
  push:
    branches:
      - 'non-op'

env:
  IAM_ROLE: lambda_exe
  IMAGE_TAG: holiday-reminder
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
  CALAMARI_USERNAME: ${{ secrets.CALAMARI_USERNAME }}
  CALAMARI_PASSWORD: ${{ secrets.CALAMARI_PASSWORD }}
  DAYS_LIMIT: ${{ secrets.DAYS_LIMIT }}
  TEST_RUN: ${{ secrets.TEST_RUN }}
  RUN_RULE: cron(0 9 * * ? *)

jobs:
  build:
    name: Update function configuration
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_CODY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Check function state
        id: function-state
        run: |
          status=x-$(aws lambda list-functions --query "Functions[?FunctionName == '$IMAGE_TAG'].FunctionName" --output text)
          echo "::set-output name=fun-exist::$status"
      - name: Create Lambda function
        id: create-lambda
        if: steps.function-state.outputs.fun-exist == 'x-'
        env:
          IMAGE_URI: ${{ steps.build-push-ecr.outputs.image }}
        run: |
          echo "There is no function called $IMAGE_TAG to update"
      - name: Update Lambda function
        id: update-lambda
        if: steps.function-state.outputs.fun-exist != 'x-'
        env:
          IMAGE_URI: ${{ steps.build-push-ecr.outputs.image }}
        run: |
          aws events put-rule --name $IMAGE_TAG-trigger --schedule-expression "$RUN_RULE"
          fun_arn=$(aws lambda list-functions --query "Functions[?FunctionName == '$IMAGE_TAG'].FunctionArn" --output text)
          aws lambda update-function-configuration --function-name $fun_arn --timeout 60 --environment "Variables={SLACK_TOKEN=$SLACK_TOKEN,CALAMARI_USERNAME=$CALAMARI_USERNAME,CALAMARI_PASSWORD=$CALAMARI_PASSWORD,DAYS_LIMIT=$DAYS_LIMIT,TEST_RUN=$TEST_RUN}" > /dev/null
          aws lambda wait function-updated --function-name $fun_arn
          aws lambda publish-version --function-name $IMAGE_TAG
          aws lambda wait function-updated --function-name $fun_arn
      - name: Test run
        if: ${{ env.TEST_RUN }}
        run: |
          fun_arn=$(aws lambda list-functions --query "Functions[?FunctionName == '$IMAGE_TAG'].FunctionArn" --output text)
          aws lambda invoke --function-name $fun_arn --log-type Tail /tmp/out.json && cat /tmp/out.json
