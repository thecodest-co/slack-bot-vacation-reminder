name: Build & deploy to prod

on:
  workflow_dispatch:
  push:
    branches: [ master ]

env:
  ECR_REPOSITORY: codest
  IMAGE_TAG: holiday-reminder
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
  CALAMARI_USERNAME: ${{ secrets.CALAMARI_USERNAME }}
  CALAMARI_PASSWORD: ${{ secrets.CALAMARI_PASSWORD }}
  DAYS_LIMIT: ${{ secrets.DAYS_LIMIT }}

jobs:
  build:
    name: Build & Deploy to prod
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push image to Amazon ECR
        id: build-push-ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Check role state
        id: role-state
        run: |
          status=x-$(aws iam list-roles --query 'Roles[?RoleName == `lambda-exe`].Arn' --output text)
          echo "::set-output name=role-exist::$status"
      - name: Create role if not exist
        id: create-role
        if: steps.role-state.outputs.role-exist == 'x-'
        run: |
          aws iam create-role --role-name lambda-exe --assume-role-policy-document '{"Version": "2012-10-17","Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}'
      - name: Check function state
        id: function-state
        run: |
          status=x-$(aws lambda list-functions --query 'Functions[?FunctionName == `holiday-reminder`].FunctionName' --output text)
          echo "::set-output name=fun-exist::$status"
      - name: Create Lambda function
        id: create-lambda
        if: steps.function-state.outputs.fun-exist == 'x-'
        env:
          IMAGE_URI: ${{ steps.build-push-ecr.outputs.image }}
        run: |
          role=$(aws iam list-roles --query 'Roles[?RoleName == `lambda-exe`].Arn' --output text)
          aws lambda create-function --function-name $IMAGE_TAG --role $role --code ImageUri=$IMAGE_URI --package-type Image --environment "Variables={SLACK_TOKEN=$SLACK_TOKEN,CALAMARI_USERNAME=$CALAMARI_USERNAME,CALAMARI_PASSWORD=$CALAMARI_PASSWORD,DAYS_LIMIT=$DAYS_LIMIT}"
          aws events put-rule --name $IMAGE_TAG-trigger --schedule-expression 'rate(1 day)' 
          rule_arn=$(aws events list-rules --query 'Rules[?Name == `$IMAGE_TAG-trigger`].Arn' --output text)
          aws lambda add-permission --function-name $IMAGE_TAG --statement-id $IMAGE_TAG-trigger --action 'lambda:InvokeFunction' --principal events.amazonaws.com --source-arn $rule_arn
      - name: Update Lambda function
        id: update-lambda
        if: steps.function-state.outputs.fun-exist != 'x-'
        env:
          IMAGE_URI: ${{ steps.build-push-ecr.outputs.image }}
        run: |
          fun_arn=$(aws lambda list-functions --query 'Functions[?FunctionName == `holiday-reminder`].FunctionArn' --output text)
          aws lambda update-function-code --function-name $fun_arn --image-uri $IMAGE_URI > /dev/null
