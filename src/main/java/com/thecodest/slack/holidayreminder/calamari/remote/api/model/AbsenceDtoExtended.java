/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * AbsenceDtoExtended
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-06T15:14:15.923389380+02:00[Europe/Warsaw]")
public class AbsenceDtoExtended {
	@SerializedName("id")
	private Long id = null;

	@SerializedName("from")
	private LocalDate from = null;

	@SerializedName("to")
	private LocalDate to = null;

	@SerializedName("absenceTypeName")
	private String absenceTypeName = null;

	@SerializedName("absenceTypeId")
	private Long absenceTypeId = null;
	@SerializedName("absenceCategory")
	private AbsenceCategoryEnum absenceCategory = null;
	@SerializedName("status")
	private StatusEnum status = null;
	@SerializedName("entitlementAmount")
	private Float entitlementAmount = null;
	@SerializedName("reason")
	private String reason = null;
	@SerializedName("amountFirstDay")
	private Float amountFirstDay = null;
	@SerializedName("amountLastDay")
	private Float amountLastDay = null;
	@SerializedName("entitlementAmountUnit")
	private EntitlementAmountUnitEnum entitlementAmountUnit = null;
	@SerializedName("created")
	private OffsetDateTime created = null;
	@SerializedName("updated")
	private OffsetDateTime updated = null;
	@SerializedName("fullDayRequest")
	private Boolean fullDayRequest = null;
	@SerializedName("startTime")
	private LocalDateTime startTime = null;
	@SerializedName("endTime")
	private LocalDateTime endTime = null;
	@SerializedName("timeZone")
	private DateTimeZone timeZone = null;
	@SerializedName("employeeEmail")
	private String employeeEmail = null;
	@SerializedName("substituteEmail")
	private String substituteEmail = null;

	public AbsenceDtoExtended id(Long id) {
		this.id = id;
		return this;
	}

	/**
	 * Absence request ID
	 *
	 * @return id
	 **/
	@Schema(required = true, description = "Absence request ID")
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public AbsenceDtoExtended from(LocalDate from) {
		this.from = from;
		return this;
	}

	/**
	 * Absence start date in ISO format
	 *
	 * @return from
	 **/
	@Schema(example = "Mon Feb 20 01:00:00 CET 2017", required = true, description = "Absence start date in ISO format")
	public LocalDate getFrom() {
		return from;
	}

	public void setFrom(LocalDate from) {
		this.from = from;
	}

	public AbsenceDtoExtended to(LocalDate to) {
		this.to = to;
		return this;
	}

	/**
	 * Absence finish date in ISO format
	 *
	 * @return to
	 **/
	@Schema(example = "Sat Feb 25 01:00:00 CET 2017", required = true, description = "Absence finish date in ISO format")
	public LocalDate getTo() {
		return to;
	}

	public void setTo(LocalDate to) {
		this.to = to;
	}

	public AbsenceDtoExtended absenceTypeName(String absenceTypeName) {
		this.absenceTypeName = absenceTypeName;
		return this;
	}

	/**
	 * Absence type name
	 *
	 * @return absenceTypeName
	 **/
	@Schema(example = "Annual leave", required = true, description = "Absence type name")
	public String getAbsenceTypeName() {
		return absenceTypeName;
	}

	public void setAbsenceTypeName(String absenceTypeName) {
		this.absenceTypeName = absenceTypeName;
	}

	public AbsenceDtoExtended absenceTypeId(Long absenceTypeId) {
		this.absenceTypeId = absenceTypeId;
		return this;
	}

	/**
	 * Absence type ID
	 *
	 * @return absenceTypeId
	 **/
	@Schema(required = true, description = "Absence type ID")
	public Long getAbsenceTypeId() {
		return absenceTypeId;
	}

	public void setAbsenceTypeId(Long absenceTypeId) {
		this.absenceTypeId = absenceTypeId;
	}

	public AbsenceDtoExtended absenceCategory(AbsenceCategoryEnum absenceCategory) {
		this.absenceCategory = absenceCategory;
		return this;
	}

	/**
	 * Absence category. TIMEOFF - regular time off. WORK - when employee is working but is not in office (eg. &#x27;Remote working day&#x27;)
	 *
	 * @return absenceCategory
	 **/
	@Schema(required = true, description = "Absence category. TIMEOFF - regular time off. WORK - when employee is working but is not in office (eg. 'Remote working day')")
	public AbsenceCategoryEnum getAbsenceCategory() {
		return absenceCategory;
	}

	public void setAbsenceCategory(AbsenceCategoryEnum absenceCategory) {
		this.absenceCategory = absenceCategory;
	}

	public AbsenceDtoExtended status(StatusEnum status) {
		this.status = status;
		return this;
	}

	/**
	 * Absence request status
	 *
	 * @return status
	 **/
	@Schema(required = true, description = "Absence request status")
	public StatusEnum getStatus() {
		return status;
	}

	public void setStatus(StatusEnum status) {
		this.status = status;
	}

	public AbsenceDtoExtended entitlementAmount(Float entitlementAmount) {
		this.entitlementAmount = entitlementAmount;
		return this;
	}

	/**
	 * Entitlement amount
	 *
	 * @return entitlementAmount
	 **/
	@Schema(required = true, description = "Entitlement amount")
	public Float getEntitlementAmount() {
		return entitlementAmount;
	}

	public void setEntitlementAmount(Float entitlementAmount) {
		this.entitlementAmount = entitlementAmount;
	}

	public AbsenceDtoExtended reason(String reason) {
		this.reason = reason;
		return this;
	}

	/**
	 * Reason for absence
	 *
	 * @return reason
	 **/
	@Schema(required = true, description = "Reason for absence")
	public String getReason() {
		return reason;
	}

	public void setReason(String reason) {
		this.reason = reason;
	}

	public AbsenceDtoExtended amountFirstDay(Float amountFirstDay) {
		this.amountFirstDay = amountFirstDay;
		return this;
	}

	/**
	 * First day amount
	 *
	 * @return amountFirstDay
	 **/
	@Schema(required = true, description = "First day amount")
	public Float getAmountFirstDay() {
		return amountFirstDay;
	}

	public void setAmountFirstDay(Float amountFirstDay) {
		this.amountFirstDay = amountFirstDay;
	}

	public AbsenceDtoExtended amountLastDay(Float amountLastDay) {
		this.amountLastDay = amountLastDay;
		return this;
	}

	/**
	 * Last day amount
	 *
	 * @return amountLastDay
	 **/
	@Schema(required = true, description = "Last day amount")
	public Float getAmountLastDay() {
		return amountLastDay;
	}

	public void setAmountLastDay(Float amountLastDay) {
		this.amountLastDay = amountLastDay;
	}

	public AbsenceDtoExtended entitlementAmountUnit(EntitlementAmountUnitEnum entitlementAmountUnit) {
		this.entitlementAmountUnit = entitlementAmountUnit;
		return this;
	}

	/**
	 * Entitlement amount unit
	 *
	 * @return entitlementAmountUnit
	 **/
	@Schema(required = true, description = "Entitlement amount unit ")
	public EntitlementAmountUnitEnum getEntitlementAmountUnit() {
		return entitlementAmountUnit;
	}

	public void setEntitlementAmountUnit(EntitlementAmountUnitEnum entitlementAmountUnit) {
		this.entitlementAmountUnit = entitlementAmountUnit;
	}

	public AbsenceDtoExtended created(OffsetDateTime created) {
		this.created = created;
		return this;
	}

	/**
	 * Date and time of absence request creation
	 *
	 * @return created
	 **/
	@Schema(required = true, description = "Date and time of absence request creation")
	public OffsetDateTime getCreated() {
		return created;
	}

	public void setCreated(OffsetDateTime created) {
		this.created = created;
	}

	public AbsenceDtoExtended updated(OffsetDateTime updated) {
		this.updated = updated;
		return this;
	}

	/**
	 * Date and time of absence request latest update
	 *
	 * @return updated
	 **/
	@Schema(required = true, description = "Date and time of absence request latest update")
	public OffsetDateTime getUpdated() {
		return updated;
	}

	public void setUpdated(OffsetDateTime updated) {
		this.updated = updated;
	}

	public AbsenceDtoExtended fullDayRequest(Boolean fullDayRequest) {
		this.fullDayRequest = fullDayRequest;
		return this;
	}

	/**
	 * Has the absence been requested for the whole day?
	 *
	 * @return fullDayRequest
	 **/
	@Schema(required = true, description = "Has the absence been requested for the whole day?")
	public Boolean isFullDayRequest() {
		return fullDayRequest;
	}

	public void setFullDayRequest(Boolean fullDayRequest) {
		this.fullDayRequest = fullDayRequest;
	}

	public AbsenceDtoExtended startTime(LocalDateTime startTime) {
		this.startTime = startTime;
		return this;
	}

	/**
	 * Get startTime
	 *
	 * @return startTime
	 **/
	@Schema(required = true, description = "")
	public LocalDateTime getStartTime() {
		return startTime;
	}

	public void setStartTime(LocalDateTime startTime) {
		this.startTime = startTime;
	}

	public AbsenceDtoExtended endTime(LocalDateTime endTime) {
		this.endTime = endTime;
		return this;
	}

	/**
	 * Get endTime
	 *
	 * @return endTime
	 **/
	@Schema(required = true, description = "")
	public LocalDateTime getEndTime() {
		return endTime;
	}

	public void setEndTime(LocalDateTime endTime) {
		this.endTime = endTime;
	}

	public AbsenceDtoExtended timeZone(DateTimeZone timeZone) {
		this.timeZone = timeZone;
		return this;
	}

	/**
	 * Get timeZone
	 *
	 * @return timeZone
	 **/
	@Schema(required = true, description = "")
	public DateTimeZone getTimeZone() {
		return timeZone;
	}

	public void setTimeZone(DateTimeZone timeZone) {
		this.timeZone = timeZone;
	}

	public AbsenceDtoExtended employeeEmail(String employeeEmail) {
		this.employeeEmail = employeeEmail;
		return this;
	}

	/**
	 * Employee email
	 *
	 * @return employeeEmail
	 **/
	@Schema(example = "john.white@mycompany.com", description = "Employee email")
	public String getEmployeeEmail() {
		return employeeEmail;
	}

	public void setEmployeeEmail(String employeeEmail) {
		this.employeeEmail = employeeEmail;
	}

	public AbsenceDtoExtended substituteEmail(String substituteEmail) {
		this.substituteEmail = substituteEmail;
		return this;
	}

	/**
	 * Substitute email. Has null value if employee does not have substitute
	 *
	 * @return substituteEmail
	 **/
	@Schema(example = "john.black@mycompany.com", description = "Substitute email. Has null value if employee does not have substitute")
	public String getSubstituteEmail() {
		return substituteEmail;
	}

	public void setSubstituteEmail(String substituteEmail) {
		this.substituteEmail = substituteEmail;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) {
			return true;
		}
		if(o == null || getClass() != o.getClass()) {
			return false;
		}
		AbsenceDtoExtended absenceDtoExtended = (AbsenceDtoExtended) o;
		return Objects.equals(this.id, absenceDtoExtended.id) && Objects.equals(this.from, absenceDtoExtended.from) && Objects.equals(this.to, absenceDtoExtended.to) && Objects.equals(this.absenceTypeName, absenceDtoExtended.absenceTypeName) && Objects.equals(this.absenceTypeId, absenceDtoExtended.absenceTypeId) && Objects.equals(this.absenceCategory, absenceDtoExtended.absenceCategory) && Objects.equals(this.status, absenceDtoExtended.status) && Objects.equals(this.entitlementAmount, absenceDtoExtended.entitlementAmount) && Objects.equals(this.reason, absenceDtoExtended.reason) && Objects.equals(this.amountFirstDay, absenceDtoExtended.amountFirstDay) && Objects.equals(this.amountLastDay, absenceDtoExtended.amountLastDay) && Objects.equals(this.entitlementAmountUnit, absenceDtoExtended.entitlementAmountUnit) && Objects.equals(this.created, absenceDtoExtended.created) && Objects.equals(this.updated, absenceDtoExtended.updated) && Objects.equals(this.fullDayRequest, absenceDtoExtended.fullDayRequest) && Objects.equals(this.startTime, absenceDtoExtended.startTime) && Objects.equals(this.endTime, absenceDtoExtended.endTime) && Objects.equals(this.timeZone, absenceDtoExtended.timeZone) && Objects.equals(this.employeeEmail, absenceDtoExtended.employeeEmail) && Objects.equals(this.substituteEmail, absenceDtoExtended.substituteEmail);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, from, to, absenceTypeName, absenceTypeId, absenceCategory, status, entitlementAmount, reason, amountFirstDay, amountLastDay, entitlementAmountUnit, created, updated, fullDayRequest, startTime, endTime, timeZone, employeeEmail, substituteEmail);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class AbsenceDtoExtended {\n");

		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    from: ").append(toIndentedString(from)).append("\n");
		sb.append("    to: ").append(toIndentedString(to)).append("\n");
		sb.append("    absenceTypeName: ").append(toIndentedString(absenceTypeName)).append("\n");
		sb.append("    absenceTypeId: ").append(toIndentedString(absenceTypeId)).append("\n");
		sb.append("    absenceCategory: ").append(toIndentedString(absenceCategory)).append("\n");
		sb.append("    status: ").append(toIndentedString(status)).append("\n");
		sb.append("    entitlementAmount: ").append(toIndentedString(entitlementAmount)).append("\n");
		sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
		sb.append("    amountFirstDay: ").append(toIndentedString(amountFirstDay)).append("\n");
		sb.append("    amountLastDay: ").append(toIndentedString(amountLastDay)).append("\n");
		sb.append("    entitlementAmountUnit: ").append(toIndentedString(entitlementAmountUnit)).append("\n");
		sb.append("    created: ").append(toIndentedString(created)).append("\n");
		sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
		sb.append("    fullDayRequest: ").append(toIndentedString(fullDayRequest)).append("\n");
		sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
		sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
		sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
		sb.append("    employeeEmail: ").append(toIndentedString(employeeEmail)).append("\n");
		sb.append("    substituteEmail: ").append(toIndentedString(substituteEmail)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if(o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Absence category. TIMEOFF - regular time off. WORK - when employee is working but is not in office (eg. &#x27;Remote working day&#x27;)
	 */
	@JsonAdapter(AbsenceCategoryEnum.Adapter.class)
	public enum AbsenceCategoryEnum {
		TIMEOFF("TIMEOFF"), WORK("WORK");

		private String value;

		AbsenceCategoryEnum(String value) {
			this.value = value;
		}

		public static AbsenceCategoryEnum fromValue(String input) {
			for(AbsenceCategoryEnum b : AbsenceCategoryEnum.values()) {
				if(b.value.equals(input)) {
					return b;
				}
			}
			return null;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<AbsenceCategoryEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final AbsenceCategoryEnum enumeration) throws IOException {
				jsonWriter.value(String.valueOf(enumeration.getValue()));
			}

			@Override
			public AbsenceCategoryEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return AbsenceCategoryEnum.fromValue((String) (value));
			}
		}
	}

	/**
	 * Absence request status
	 */
	@JsonAdapter(StatusEnum.Adapter.class)
	public enum StatusEnum {
		PENDING("PENDING"), PENDING_CANCELLATION("PENDING_CANCELLATION"), REJECTED("REJECTED"), ACCEPTED("ACCEPTED"), CANCELED("CANCELED"), REVOKED("REVOKED");

		private String value;

		StatusEnum(String value) {
			this.value = value;
		}

		public static StatusEnum fromValue(String input) {
			for(StatusEnum b : StatusEnum.values()) {
				if(b.value.equals(input)) {
					return b;
				}
			}
			return null;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<StatusEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
				jsonWriter.value(String.valueOf(enumeration.getValue()));
			}

			@Override
			public StatusEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return StatusEnum.fromValue((String) (value));
			}
		}
	}

	/**
	 * Entitlement amount unit
	 */
	@JsonAdapter(EntitlementAmountUnitEnum.Adapter.class)
	public enum EntitlementAmountUnitEnum {
		DAYS("DAYS"), HOURS("HOURS");

		private String value;

		EntitlementAmountUnitEnum(String value) {
			this.value = value;
		}

		public static EntitlementAmountUnitEnum fromValue(String input) {
			for(EntitlementAmountUnitEnum b : EntitlementAmountUnitEnum.values()) {
				if(b.value.equals(input)) {
					return b;
				}
			}
			return null;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<EntitlementAmountUnitEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final EntitlementAmountUnitEnum enumeration) throws IOException {
				jsonWriter.value(String.valueOf(enumeration.getValue()));
			}

			@Override
			public EntitlementAmountUnitEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return EntitlementAmountUnitEnum.fromValue((String) (value));
			}
		}
	}

}
