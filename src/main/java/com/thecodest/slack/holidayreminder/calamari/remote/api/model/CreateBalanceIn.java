/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.LocalDate;
import java.util.Objects;

/**
 * Create entitlement balance.
 */
@Schema(description = "Create entitlement balance.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-06T15:14:15.923389380+02:00[Europe/Warsaw]")
public class CreateBalanceIn {
	@SerializedName("amount")
	private String amount = null;

	@SerializedName("asOfDate")
	private LocalDate asOfDate = null;

	@SerializedName("absenceType")
	private Long absenceType = null;

	@SerializedName("comment")
	private String comment = null;

	@SerializedName("balanceOwner")
	private String balanceOwner = null;

	public CreateBalanceIn amount(String amount) {
		this.amount = amount;
		return this;
	}

	/**
	 * Entitlement amount with precision 3
	 *
	 * @return amount
	 **/
	@Schema(example = "1.5", required = true, description = "Entitlement amount with precision 3")
	public String getAmount() {
		return amount;
	}

	public void setAmount(String amount) {
		this.amount = amount;
	}

	public CreateBalanceIn asOfDate(LocalDate asOfDate) {
		this.asOfDate = asOfDate;
		return this;
	}

	/**
	 * Date in ISO format
	 *
	 * @return asOfDate
	 **/
	@Schema(example = "Tue Sep 25 02:00:00 CEST 2018", required = true, description = "Date in ISO format")
	public LocalDate getAsOfDate() {
		return asOfDate;
	}

	public void setAsOfDate(LocalDate asOfDate) {
		this.asOfDate = asOfDate;
	}

	public CreateBalanceIn absenceType(Long absenceType) {
		this.absenceType = absenceType;
		return this;
	}

	/**
	 * Absence type Id
	 *
	 * @return absenceType
	 **/
	@Schema(required = true, description = "Absence type Id")
	public Long getAbsenceType() {
		return absenceType;
	}

	public void setAbsenceType(Long absenceType) {
		this.absenceType = absenceType;
	}

	public CreateBalanceIn comment(String comment) {
		this.comment = comment;
		return this;
	}

	/**
	 * Optional comment
	 *
	 * @return comment
	 **/
	@Schema(example = "Example comment", description = "Optional comment")
	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	public CreateBalanceIn balanceOwner(String balanceOwner) {
		this.balanceOwner = balanceOwner;
		return this;
	}

	/**
	 * Get balanceOwner
	 *
	 * @return balanceOwner
	 **/
	@Schema(description = "")
	public String getBalanceOwner() {
		return balanceOwner;
	}

	public void setBalanceOwner(String balanceOwner) {
		this.balanceOwner = balanceOwner;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) {
			return true;
		}
		if(o == null || getClass() != o.getClass()) {
			return false;
		}
		CreateBalanceIn createBalanceIn = (CreateBalanceIn) o;
		return Objects.equals(this.amount, createBalanceIn.amount) && Objects.equals(this.asOfDate, createBalanceIn.asOfDate) && Objects.equals(this.absenceType, createBalanceIn.absenceType) && Objects.equals(this.comment, createBalanceIn.comment) && Objects.equals(this.balanceOwner, createBalanceIn.balanceOwner);
	}

	@Override
	public int hashCode() {
		return Objects.hash(amount, asOfDate, absenceType, comment, balanceOwner);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class CreateBalanceIn {\n");

		sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
		sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
		sb.append("    absenceType: ").append(toIndentedString(absenceType)).append("\n");
		sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
		sb.append("    balanceOwner: ").append(toIndentedString(balanceOwner)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if(o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
