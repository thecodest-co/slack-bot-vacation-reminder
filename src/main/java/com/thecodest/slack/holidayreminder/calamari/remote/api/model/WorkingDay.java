/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Objects;

/**
 * WorkingDay
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-06T15:14:15.923389380+02:00[Europe/Warsaw]")
public class WorkingDay {
	@SerializedName("dayName")
	private DayNameEnum dayName = null;
	@SerializedName("isWorkingDay")
	private Boolean isWorkingDay = null;
	@SerializedName("startTime")
	private LocalTime startTime = null;
	@SerializedName("finishTime")
	private LocalTime finishTime = null;
	@SerializedName("duration")
	private Long duration = null;

	public WorkingDay dayName(DayNameEnum dayName) {
		this.dayName = dayName;
		return this;
	}

	/**
	 * Working day name.
	 *
	 * @return dayName
	 **/
	@Schema(example = "MONDAY", required = true, description = "Working day name.")
	public DayNameEnum getDayName() {
		return dayName;
	}

	public void setDayName(DayNameEnum dayName) {
		this.dayName = dayName;
	}

	public WorkingDay isWorkingDay(Boolean isWorkingDay) {
		this.isWorkingDay = isWorkingDay;
		return this;
	}

	/**
	 * Is it working day.
	 *
	 * @return isWorkingDay
	 **/
	@Schema(example = "true", required = true, description = "Is it working day.")
	public Boolean isIsWorkingDay() {
		return isWorkingDay;
	}

	public void setIsWorkingDay(Boolean isWorkingDay) {
		this.isWorkingDay = isWorkingDay;
	}

	public WorkingDay startTime(LocalTime startTime) {
		this.startTime = startTime;
		return this;
	}

	/**
	 * Get startTime
	 *
	 * @return startTime
	 **/
	@Schema(required = true, description = "")
	public LocalTime getStartTime() {
		return startTime;
	}

	public void setStartTime(LocalTime startTime) {
		this.startTime = startTime;
	}

	public WorkingDay finishTime(LocalTime finishTime) {
		this.finishTime = finishTime;
		return this;
	}

	/**
	 * Get finishTime
	 *
	 * @return finishTime
	 **/
	@Schema(required = true, description = "")
	public LocalTime getFinishTime() {
		return finishTime;
	}

	public void setFinishTime(LocalTime finishTime) {
		this.finishTime = finishTime;
	}

	public WorkingDay duration(Long duration) {
		this.duration = duration;
		return this;
	}

	/**
	 * Work duration in seconds &gt;&#x3D; 0 or has null value when specified day is not working day.
	 *
	 * @return duration
	 **/
	@Schema(example = "28800", required = true, description = "Work duration in seconds >= 0 or has null value when specified day is not working day.")
	public Long getDuration() {
		return duration;
	}

	public void setDuration(Long duration) {
		this.duration = duration;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) {
			return true;
		}
		if(o == null || getClass() != o.getClass()) {
			return false;
		}
		WorkingDay workingDay = (WorkingDay) o;
		return Objects.equals(this.dayName, workingDay.dayName) && Objects.equals(this.isWorkingDay, workingDay.isWorkingDay) && Objects.equals(this.startTime, workingDay.startTime) && Objects.equals(this.finishTime, workingDay.finishTime) && Objects.equals(this.duration, workingDay.duration);
	}

	@Override
	public int hashCode() {
		return Objects.hash(dayName, isWorkingDay, startTime, finishTime, duration);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class WorkingDay {\n");

		sb.append("    dayName: ").append(toIndentedString(dayName)).append("\n");
		sb.append("    isWorkingDay: ").append(toIndentedString(isWorkingDay)).append("\n");
		sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
		sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
		sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if(o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Working day name.
	 */
	@JsonAdapter(DayNameEnum.Adapter.class)
	public enum DayNameEnum {
		MONDAY("MONDAY"), TUESDAY("TUESDAY"), WEDNESDAY("WEDNESDAY"), THURSDAY("THURSDAY"), FRIDAY("FRIDAY"), SATURDAY("SATURDAY"), SUNDAY("SUNDAY");

		private String value;

		DayNameEnum(String value) {
			this.value = value;
		}

		public static DayNameEnum fromValue(String input) {
			for(DayNameEnum b : DayNameEnum.values()) {
				if(b.value.equals(input)) {
					return b;
				}
			}
			return null;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<DayNameEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final DayNameEnum enumeration) throws IOException {
				jsonWriter.value(String.valueOf(enumeration.getValue()));
			}

			@Override
			public DayNameEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return DayNameEnum.fromValue((String) (value));
			}
		}
	}

}
