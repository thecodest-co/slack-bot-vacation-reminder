/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * PublicSearchEmployeesIn
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-06T15:14:15.923389380+02:00[Europe/Warsaw]")
public class PublicSearchEmployeesIn {
	@SerializedName("employee")
	private String employee = null;

	@SerializedName("contractTypes")
	private List<String> contractTypes = null;

	@SerializedName("positions")
	private List<String> positions = null;

	@SerializedName("teams")
	private List<String> teams = null;

	@SerializedName("withArchived")
	private Boolean withArchived = null;

	public PublicSearchEmployeesIn employee(String employee) {
		this.employee = employee;
		return this;
	}

	/**
	 * Employee identifier. You can use e-mail or external identifier in format (externalNumber:ABC123)
	 *
	 * @return employee
	 **/
	@Schema(example = "john.white@mycompany.com", description = "Employee identifier. You can use e-mail or external identifier in format (externalNumber:ABC123)")
	public String getEmployee() {
		return employee;
	}

	public void setEmployee(String employee) {
		this.employee = employee;
	}

	public PublicSearchEmployeesIn contractTypes(List<String> contractTypes) {
		this.contractTypes = contractTypes;
		return this;
	}

	public PublicSearchEmployeesIn addContractTypesItem(String contractTypesItem) {
		if(this.contractTypes == null) {
			this.contractTypes = new ArrayList<>();
		}
		this.contractTypes.add(contractTypesItem);
		return this;
	}

	/**
	 * Contract type name or identifier
	 *
	 * @return contractTypes
	 **/
	@Schema(description = "Contract type name or identifier")
	public List<String> getContractTypes() {
		return contractTypes;
	}

	public void setContractTypes(List<String> contractTypes) {
		this.contractTypes = contractTypes;
	}

	public PublicSearchEmployeesIn positions(List<String> positions) {
		this.positions = positions;
		return this;
	}

	public PublicSearchEmployeesIn addPositionsItem(String positionsItem) {
		if(this.positions == null) {
			this.positions = new ArrayList<>();
		}
		this.positions.add(positionsItem);
		return this;
	}

	/**
	 * List of Position names or identifiers.
	 *
	 * @return positions
	 **/
	@Schema(description = "List of Position names or identifiers.")
	public List<String> getPositions() {
		return positions;
	}

	public void setPositions(List<String> positions) {
		this.positions = positions;
	}

	public PublicSearchEmployeesIn teams(List<String> teams) {
		this.teams = teams;
		return this;
	}

	public PublicSearchEmployeesIn addTeamsItem(String teamsItem) {
		if(this.teams == null) {
			this.teams = new ArrayList<>();
		}
		this.teams.add(teamsItem);
		return this;
	}

	/**
	 * List of teams names or identifiers
	 *
	 * @return teams
	 **/
	@Schema(description = "List of teams names or identifiers")
	public List<String> getTeams() {
		return teams;
	}

	public void setTeams(List<String> teams) {
		this.teams = teams;
	}

	public PublicSearchEmployeesIn withArchived(Boolean withArchived) {
		this.withArchived = withArchived;
		return this;
	}

	/**
	 * Should return also archived employees?
	 *
	 * @return withArchived
	 **/
	@Schema(description = "Should return also archived employees?")
	public Boolean isWithArchived() {
		return withArchived;
	}

	public void setWithArchived(Boolean withArchived) {
		this.withArchived = withArchived;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) {
			return true;
		}
		if(o == null || getClass() != o.getClass()) {
			return false;
		}
		PublicSearchEmployeesIn publicSearchEmployeesIn = (PublicSearchEmployeesIn) o;
		return Objects.equals(this.employee, publicSearchEmployeesIn.employee) && Objects.equals(this.contractTypes, publicSearchEmployeesIn.contractTypes) && Objects.equals(this.positions, publicSearchEmployeesIn.positions) && Objects.equals(this.teams, publicSearchEmployeesIn.teams) && Objects.equals(this.withArchived, publicSearchEmployeesIn.withArchived);
	}

	@Override
	public int hashCode() {
		return Objects.hash(employee, contractTypes, positions, teams, withArchived);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class PublicSearchEmployeesIn {\n");

		sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
		sb.append("    contractTypes: ").append(toIndentedString(contractTypes)).append("\n");
		sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
		sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
		sb.append("    withArchived: ").append(toIndentedString(withArchived)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if(o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
