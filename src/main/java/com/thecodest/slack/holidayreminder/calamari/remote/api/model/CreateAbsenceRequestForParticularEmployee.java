/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Objects;

/**
 * CreateAbsenceRequestForParticularEmployee
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-06T15:14:15.923389380+02:00[Europe/Warsaw]")
public class CreateAbsenceRequestForParticularEmployee {
	@SerializedName("employee")
	private String employee = null;
	@SerializedName("fromPart")
	private FromPartEnum fromPart = null;
	@SerializedName("toPart")
	private ToPartEnum toPart = null;
	@SerializedName("absenceTypeId")
	private String absenceTypeId = null;
	@SerializedName("reason")
	private String reason = null;
	@SerializedName("substitute")
	private String substitute = null;
	@SerializedName("comment")
	private String comment = null;
	@SerializedName("dateFrom")
	private LocalDate dateFrom = null;
	@SerializedName("dateTo")
	private LocalDate dateTo = null;

	public CreateAbsenceRequestForParticularEmployee employee(String employee) {
		this.employee = employee;
		return this;
	}

	/**
	 * Employee e-mail or login. Absence request will be created for the chosen employee. Chosen employee will be also a creator of request.
	 *
	 * @return employee
	 **/
	@Schema(example = "john.white@mycompany.com", required = true, description = "Employee e-mail or login. Absence request will be created for the chosen employee. Chosen employee will be also a creator of request.")
	public String getEmployee() {
		return employee;
	}

	public void setEmployee(String employee) {
		this.employee = employee;
	}

	public CreateAbsenceRequestForParticularEmployee fromPart(FromPartEnum fromPart) {
		this.fromPart = fromPart;
		return this;
	}

	/**
	 * Time part value for absence start. Allowed values are based on minimal duration of absence request in absence type configuration.
	 *
	 * @return fromPart
	 **/
	@Schema(example = "MORNING", required = true, description = "Time part value for absence start. Allowed values are based on minimal duration of absence request in absence type configuration.")
	public FromPartEnum getFromPart() {
		return fromPart;
	}

	public void setFromPart(FromPartEnum fromPart) {
		this.fromPart = fromPart;
	}

	public CreateAbsenceRequestForParticularEmployee toPart(ToPartEnum toPart) {
		this.toPart = toPart;
		return this;
	}

	/**
	 * Time part value for absence end. Allowed values are based on minimal duration of absence request in absence type configuration.
	 *
	 * @return toPart
	 **/
	@Schema(example = "END_OF_DAY", required = true, description = "Time part value for absence end. Allowed values are based on minimal duration of absence request in absence type configuration.")
	public ToPartEnum getToPart() {
		return toPart;
	}

	public void setToPart(ToPartEnum toPart) {
		this.toPart = toPart;
	}

	public CreateAbsenceRequestForParticularEmployee absenceTypeId(String absenceTypeId) {
		this.absenceTypeId = absenceTypeId;
		return this;
	}

	/**
	 * Absence type Id
	 *
	 * @return absenceTypeId
	 **/
	@Schema(example = "PTO", required = true, description = "Absence type Id")
	public String getAbsenceTypeId() {
		return absenceTypeId;
	}

	public void setAbsenceTypeId(String absenceTypeId) {
		this.absenceTypeId = absenceTypeId;
	}

	public CreateAbsenceRequestForParticularEmployee reason(String reason) {
		this.reason = reason;
		return this;
	}

	/**
	 * Reason content
	 *
	 * @return reason
	 **/
	@Schema(example = "Home office", description = "Reason content")
	public String getReason() {
		return reason;
	}

	public void setReason(String reason) {
		this.reason = reason;
	}

	public CreateAbsenceRequestForParticularEmployee substitute(String substitute) {
		this.substitute = substitute;
		return this;
	}

	/**
	 * Employee e-mail or login
	 *
	 * @return substitute
	 **/
	@Schema(example = "john.white@mycompany.com", description = "Employee e-mail or login")
	public String getSubstitute() {
		return substitute;
	}

	public void setSubstitute(String substitute) {
		this.substitute = substitute;
	}

	public CreateAbsenceRequestForParticularEmployee comment(String comment) {
		this.comment = comment;
		return this;
	}

	/**
	 * Comment content
	 *
	 * @return comment
	 **/
	@Schema(example = "Home office", description = "Comment content")
	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}

	public CreateAbsenceRequestForParticularEmployee dateFrom(LocalDate dateFrom) {
		this.dateFrom = dateFrom;
		return this;
	}

	/**
	 * Get dateFrom
	 *
	 * @return dateFrom
	 **/
	@Schema(description = "")
	public LocalDate getDateFrom() {
		return dateFrom;
	}

	public void setDateFrom(LocalDate dateFrom) {
		this.dateFrom = dateFrom;
	}

	public CreateAbsenceRequestForParticularEmployee dateTo(LocalDate dateTo) {
		this.dateTo = dateTo;
		return this;
	}

	/**
	 * Get dateTo
	 *
	 * @return dateTo
	 **/
	@Schema(description = "")
	public LocalDate getDateTo() {
		return dateTo;
	}

	public void setDateTo(LocalDate dateTo) {
		this.dateTo = dateTo;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) {
			return true;
		}
		if(o == null || getClass() != o.getClass()) {
			return false;
		}
		CreateAbsenceRequestForParticularEmployee createAbsenceRequestForParticularEmployee = (CreateAbsenceRequestForParticularEmployee) o;
		return Objects.equals(this.employee, createAbsenceRequestForParticularEmployee.employee) && Objects.equals(this.fromPart, createAbsenceRequestForParticularEmployee.fromPart) && Objects.equals(this.toPart, createAbsenceRequestForParticularEmployee.toPart) && Objects.equals(this.absenceTypeId, createAbsenceRequestForParticularEmployee.absenceTypeId) && Objects.equals(this.reason, createAbsenceRequestForParticularEmployee.reason) && Objects.equals(this.substitute, createAbsenceRequestForParticularEmployee.substitute) && Objects.equals(this.comment, createAbsenceRequestForParticularEmployee.comment) && Objects.equals(this.dateFrom, createAbsenceRequestForParticularEmployee.dateFrom) && Objects.equals(this.dateTo, createAbsenceRequestForParticularEmployee.dateTo);
	}

	@Override
	public int hashCode() {
		return Objects.hash(employee, fromPart, toPart, absenceTypeId, reason, substitute, comment, dateFrom, dateTo);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class CreateAbsenceRequestForParticularEmployee {\n");

		sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
		sb.append("    fromPart: ").append(toIndentedString(fromPart)).append("\n");
		sb.append("    toPart: ").append(toIndentedString(toPart)).append("\n");
		sb.append("    absenceTypeId: ").append(toIndentedString(absenceTypeId)).append("\n");
		sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
		sb.append("    substitute: ").append(toIndentedString(substitute)).append("\n");
		sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
		sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
		sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if(o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Time part value for absence start. Allowed values are based on minimal duration of absence request in absence type configuration.
	 */
	@JsonAdapter(FromPartEnum.Adapter.class)
	public enum FromPartEnum {
		MORNING("MORNING"), AFTERNOON("AFTERNOON"), END_OF_DAY_AND_HOUR_BASED_HH_MM_("END_OF_DAY and hour based(HH:mm)");

		private String value;

		FromPartEnum(String value) {
			this.value = value;
		}

		public static FromPartEnum fromValue(String input) {
			for(FromPartEnum b : FromPartEnum.values()) {
				if(b.value.equals(input)) {
					return b;
				}
			}
			return null;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<FromPartEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final FromPartEnum enumeration) throws IOException {
				jsonWriter.value(String.valueOf(enumeration.getValue()));
			}

			@Override
			public FromPartEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return FromPartEnum.fromValue((String) (value));
			}
		}
	}

	/**
	 * Time part value for absence end. Allowed values are based on minimal duration of absence request in absence type configuration.
	 */
	@JsonAdapter(ToPartEnum.Adapter.class)
	public enum ToPartEnum {
		MORNING("MORNING"), AFTERNOON("AFTERNOON"), END_OF_DAY_AND_HOUR_BASED_HH_MM_("END_OF_DAY and hour based(HH:mm)");

		private String value;

		ToPartEnum(String value) {
			this.value = value;
		}

		public static ToPartEnum fromValue(String input) {
			for(ToPartEnum b : ToPartEnum.values()) {
				if(b.value.equals(input)) {
					return b;
				}
			}
			return null;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<ToPartEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final ToPartEnum enumeration) throws IOException {
				jsonWriter.value(String.valueOf(enumeration.getValue()));
			}

			@Override
			public ToPartEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return ToPartEnum.fromValue((String) (value));
			}
		}
	}

}
