/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * EmployeeFullOut
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-07-06T15:14:15.923389380+02:00[Europe/Warsaw]")
public class EmployeeFullOut {
	@SerializedName("id")
	private Long id = null;

	@SerializedName("firstName")
	private String firstName = null;

	@SerializedName("lastName")
	private String lastName = null;

	@SerializedName("email")
	private String email = null;

	@SerializedName("externalNumber")
	private String externalNumber = null;

	@SerializedName("workingWeek")
	private SimpleWorkingWeek workingWeek = null;

	@SerializedName("approvalFlow")
	private SimpleAcceptanceFlow approvalFlow = null;

	@SerializedName("position")
	private SimplePosition position = null;

	@SerializedName("teams")
	private List<SimpleTeam> teams = new ArrayList<>();

	@SerializedName("admin")
	private Boolean admin = null;

	@SerializedName("contractType")
	private SimpleContractType contractType = null;

	@SerializedName("language")
	private String language = null;

	@SerializedName("timezone")
	private String timezone = null;

	@SerializedName("directManager")
	private SimpleEmployee directManager = null;

	@SerializedName("birthDate")
	private LocalDate birthDate = null;

	@SerializedName("hireDate")
	private LocalDate hireDate = null;

	@SerializedName("businessPhone")
	private String businessPhone = null;

	@SerializedName("homePhone")
	private String homePhone = null;

	@SerializedName("personalEmail")
	private String personalEmail = null;

	@SerializedName("addressStreet")
	private String addressStreet = null;

	@SerializedName("addressNumber")
	private String addressNumber = null;

	@SerializedName("addressCity")
	private String addressCity = null;

	@SerializedName("addressPostalCode")
	private String addressPostalCode = null;

	@SerializedName("addressProvinceState")
	private String addressProvinceState = null;

	@SerializedName("addressCountry")
	private String addressCountry = null;

	@SerializedName("emergencyContactName")
	private String emergencyContactName = null;

	@SerializedName("emergencyContactRelationship")
	private String emergencyContactRelationship = null;

	@SerializedName("emergencyContactPhone")
	private String emergencyContactPhone = null;

	@SerializedName("holidaysCalendar")
	private GetHolidayCalendarOut holidaysCalendar = null;
	@SerializedName("maritalStatus")
	private MaritalStatusEnum maritalStatus = null;
	@SerializedName("probationEndDate")
	private LocalDate probationEndDate = null;
	@SerializedName("plannedFiring")
	private LocalDate plannedFiring = null;
	@SerializedName("seniorityBeforeHireYears")
	private Integer seniorityBeforeHireYears = null;
	@SerializedName("seniorityBeforeHireMonths")
	private Integer seniorityBeforeHireMonths = null;
	@SerializedName("childrenCount")
	private Integer childrenCount = null;
	@SerializedName("youngestChildBirthDate")
	private LocalDate youngestChildBirthDate = null;
	@SerializedName("customNote")
	private String customNote = null;
	@SerializedName("sex")
	private SexEnum sex = null;
	@SerializedName("archived")
	private Boolean archived = null;

	public EmployeeFullOut id(Long id) {
		this.id = id;
		return this;
	}

	/**
	 * Employee id number
	 *
	 * @return id
	 **/
	@Schema(required = true, description = "Employee id number")
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public EmployeeFullOut firstName(String firstName) {
		this.firstName = firstName;
		return this;
	}

	/**
	 * Employee first name
	 *
	 * @return firstName
	 **/
	@Schema(example = "John", required = true, description = "Employee first name")
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public EmployeeFullOut lastName(String lastName) {
		this.lastName = lastName;
		return this;
	}

	/**
	 * Employee last name
	 *
	 * @return lastName
	 **/
	@Schema(example = "Smith", required = true, description = "Employee last name")
	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public EmployeeFullOut email(String email) {
		this.email = email;
		return this;
	}

	/**
	 * Employee email
	 *
	 * @return email
	 **/
	@Schema(example = "john.smith@domain.com", required = true, description = "Employee email")
	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public EmployeeFullOut externalNumber(String externalNumber) {
		this.externalNumber = externalNumber;
		return this;
	}

	/**
	 * External employee number
	 *
	 * @return externalNumber
	 **/
	@Schema(example = "AYU23", required = true, description = "External employee number")
	public String getExternalNumber() {
		return externalNumber;
	}

	public void setExternalNumber(String externalNumber) {
		this.externalNumber = externalNumber;
	}

	public EmployeeFullOut workingWeek(SimpleWorkingWeek workingWeek) {
		this.workingWeek = workingWeek;
		return this;
	}

	/**
	 * Get workingWeek
	 *
	 * @return workingWeek
	 **/
	@Schema(required = true, description = "")
	public SimpleWorkingWeek getWorkingWeek() {
		return workingWeek;
	}

	public void setWorkingWeek(SimpleWorkingWeek workingWeek) {
		this.workingWeek = workingWeek;
	}

	public EmployeeFullOut approvalFlow(SimpleAcceptanceFlow approvalFlow) {
		this.approvalFlow = approvalFlow;
		return this;
	}

	/**
	 * Get approvalFlow
	 *
	 * @return approvalFlow
	 **/
	@Schema(required = true, description = "")
	public SimpleAcceptanceFlow getApprovalFlow() {
		return approvalFlow;
	}

	public void setApprovalFlow(SimpleAcceptanceFlow approvalFlow) {
		this.approvalFlow = approvalFlow;
	}

	public EmployeeFullOut position(SimplePosition position) {
		this.position = position;
		return this;
	}

	/**
	 * Get position
	 *
	 * @return position
	 **/
	@Schema(required = true, description = "")
	public SimplePosition getPosition() {
		return position;
	}

	public void setPosition(SimplePosition position) {
		this.position = position;
	}

	public EmployeeFullOut teams(List<SimpleTeam> teams) {
		this.teams = teams;
		return this;
	}

	public EmployeeFullOut addTeamsItem(SimpleTeam teamsItem) {
		this.teams.add(teamsItem);
		return this;
	}

	/**
	 * Teams
	 *
	 * @return teams
	 **/
	@Schema(required = true, description = "Teams")
	public List<SimpleTeam> getTeams() {
		return teams;
	}

	public void setTeams(List<SimpleTeam> teams) {
		this.teams = teams;
	}

	public EmployeeFullOut admin(Boolean admin) {
		this.admin = admin;
		return this;
	}

	/**
	 * Is the employee is an admin?
	 *
	 * @return admin
	 **/
	@Schema(required = true, description = "Is the employee is an admin?")
	public Boolean isAdmin() {
		return admin;
	}

	public void setAdmin(Boolean admin) {
		this.admin = admin;
	}

	public EmployeeFullOut contractType(SimpleContractType contractType) {
		this.contractType = contractType;
		return this;
	}

	/**
	 * Get contractType
	 *
	 * @return contractType
	 **/
	@Schema(required = true, description = "")
	public SimpleContractType getContractType() {
		return contractType;
	}

	public void setContractType(SimpleContractType contractType) {
		this.contractType = contractType;
	}

	public EmployeeFullOut language(String language) {
		this.language = language;
		return this;
	}

	/**
	 * Employee language
	 *
	 * @return language
	 **/
	@Schema(example = "EN", required = true, description = "Employee language")
	public String getLanguage() {
		return language;
	}

	public void setLanguage(String language) {
		this.language = language;
	}

	public EmployeeFullOut timezone(String timezone) {
		this.timezone = timezone;
		return this;
	}

	/**
	 * Employee timezone
	 *
	 * @return timezone
	 **/
	@Schema(example = "Europe/Warsaw", required = true, description = "Employee timezone")
	public String getTimezone() {
		return timezone;
	}

	public void setTimezone(String timezone) {
		this.timezone = timezone;
	}

	public EmployeeFullOut directManager(SimpleEmployee directManager) {
		this.directManager = directManager;
		return this;
	}

	/**
	 * Get directManager
	 *
	 * @return directManager
	 **/
	@Schema(required = true, description = "")
	public SimpleEmployee getDirectManager() {
		return directManager;
	}

	public void setDirectManager(SimpleEmployee directManager) {
		this.directManager = directManager;
	}

	public EmployeeFullOut birthDate(LocalDate birthDate) {
		this.birthDate = birthDate;
		return this;
	}

	/**
	 * Birth date
	 *
	 * @return birthDate
	 **/
	@Schema(example = "Mon Feb 20 01:00:00 CET 2017", required = true, description = "Birth date")
	public LocalDate getBirthDate() {
		return birthDate;
	}

	public void setBirthDate(LocalDate birthDate) {
		this.birthDate = birthDate;
	}

	public EmployeeFullOut hireDate(LocalDate hireDate) {
		this.hireDate = hireDate;
		return this;
	}

	/**
	 * Hire date
	 *
	 * @return hireDate
	 **/
	@Schema(example = "Mon Feb 20 01:00:00 CET 2017", required = true, description = "Hire date")
	public LocalDate getHireDate() {
		return hireDate;
	}

	public void setHireDate(LocalDate hireDate) {
		this.hireDate = hireDate;
	}

	public EmployeeFullOut businessPhone(String businessPhone) {
		this.businessPhone = businessPhone;
		return this;
	}

	/**
	 * Business phone
	 *
	 * @return businessPhone
	 **/
	@Schema(example = "827032162", required = true, description = "Business phone")
	public String getBusinessPhone() {
		return businessPhone;
	}

	public void setBusinessPhone(String businessPhone) {
		this.businessPhone = businessPhone;
	}

	public EmployeeFullOut homePhone(String homePhone) {
		this.homePhone = homePhone;
		return this;
	}

	/**
	 * Home phone
	 *
	 * @return homePhone
	 **/
	@Schema(example = "826021237", required = true, description = "Home phone")
	public String getHomePhone() {
		return homePhone;
	}

	public void setHomePhone(String homePhone) {
		this.homePhone = homePhone;
	}

	public EmployeeFullOut personalEmail(String personalEmail) {
		this.personalEmail = personalEmail;
		return this;
	}

	/**
	 * Personal email
	 *
	 * @return personalEmail
	 **/
	@Schema(example = "john.smith@personalDomain.com", required = true, description = "Personal email")
	public String getPersonalEmail() {
		return personalEmail;
	}

	public void setPersonalEmail(String personalEmail) {
		this.personalEmail = personalEmail;
	}

	public EmployeeFullOut addressStreet(String addressStreet) {
		this.addressStreet = addressStreet;
		return this;
	}

	/**
	 * Address street
	 *
	 * @return addressStreet
	 **/
	@Schema(example = "Small Street", required = true, description = "Address street")
	public String getAddressStreet() {
		return addressStreet;
	}

	public void setAddressStreet(String addressStreet) {
		this.addressStreet = addressStreet;
	}

	public EmployeeFullOut addressNumber(String addressNumber) {
		this.addressNumber = addressNumber;
		return this;
	}

	/**
	 * Address building/flat number
	 *
	 * @return addressNumber
	 **/
	@Schema(example = "2/12", required = true, description = "Address building/flat number")
	public String getAddressNumber() {
		return addressNumber;
	}

	public void setAddressNumber(String addressNumber) {
		this.addressNumber = addressNumber;
	}

	public EmployeeFullOut addressCity(String addressCity) {
		this.addressCity = addressCity;
		return this;
	}

	/**
	 * Address city
	 *
	 * @return addressCity
	 **/
	@Schema(example = "Warsaw", required = true, description = "Address city")
	public String getAddressCity() {
		return addressCity;
	}

	public void setAddressCity(String addressCity) {
		this.addressCity = addressCity;
	}

	public EmployeeFullOut addressPostalCode(String addressPostalCode) {
		this.addressPostalCode = addressPostalCode;
		return this;
	}

	/**
	 * Address postal code
	 *
	 * @return addressPostalCode
	 **/
	@Schema(example = "15-322", required = true, description = "Address postal code")
	public String getAddressPostalCode() {
		return addressPostalCode;
	}

	public void setAddressPostalCode(String addressPostalCode) {
		this.addressPostalCode = addressPostalCode;
	}

	public EmployeeFullOut addressProvinceState(String addressProvinceState) {
		this.addressProvinceState = addressProvinceState;
		return this;
	}

	/**
	 * Address province/state.
	 *
	 * @return addressProvinceState
	 **/
	@Schema(example = "Main province", required = true, description = "Address province/state.")
	public String getAddressProvinceState() {
		return addressProvinceState;
	}

	public void setAddressProvinceState(String addressProvinceState) {
		this.addressProvinceState = addressProvinceState;
	}

	public EmployeeFullOut addressCountry(String addressCountry) {
		this.addressCountry = addressCountry;
		return this;
	}

	/**
	 * Address country
	 *
	 * @return addressCountry
	 **/
	@Schema(example = "Poland", required = true, description = "Address country")
	public String getAddressCountry() {
		return addressCountry;
	}

	public void setAddressCountry(String addressCountry) {
		this.addressCountry = addressCountry;
	}

	public EmployeeFullOut emergencyContactName(String emergencyContactName) {
		this.emergencyContactName = emergencyContactName;
		return this;
	}

	/**
	 * Emergency contact name
	 *
	 * @return emergencyContactName
	 **/
	@Schema(example = "Contact name", required = true, description = "Emergency contact name")
	public String getEmergencyContactName() {
		return emergencyContactName;
	}

	public void setEmergencyContactName(String emergencyContactName) {
		this.emergencyContactName = emergencyContactName;
	}

	public EmployeeFullOut emergencyContactRelationship(String emergencyContactRelationship) {
		this.emergencyContactRelationship = emergencyContactRelationship;
		return this;
	}

	/**
	 * Emergency contact relationship
	 *
	 * @return emergencyContactRelationship
	 **/
	@Schema(example = "Contact relationship", required = true, description = "Emergency contact relationship")
	public String getEmergencyContactRelationship() {
		return emergencyContactRelationship;
	}

	public void setEmergencyContactRelationship(String emergencyContactRelationship) {
		this.emergencyContactRelationship = emergencyContactRelationship;
	}

	public EmployeeFullOut emergencyContactPhone(String emergencyContactPhone) {
		this.emergencyContactPhone = emergencyContactPhone;
		return this;
	}

	/**
	 * Emergency contact phone
	 *
	 * @return emergencyContactPhone
	 **/
	@Schema(example = "820321876", required = true, description = "Emergency contact phone")
	public String getEmergencyContactPhone() {
		return emergencyContactPhone;
	}

	public void setEmergencyContactPhone(String emergencyContactPhone) {
		this.emergencyContactPhone = emergencyContactPhone;
	}

	public EmployeeFullOut holidaysCalendar(GetHolidayCalendarOut holidaysCalendar) {
		this.holidaysCalendar = holidaysCalendar;
		return this;
	}

	/**
	 * Get holidaysCalendar
	 *
	 * @return holidaysCalendar
	 **/
	@Schema(required = true, description = "")
	public GetHolidayCalendarOut getHolidaysCalendar() {
		return holidaysCalendar;
	}

	public void setHolidaysCalendar(GetHolidayCalendarOut holidaysCalendar) {
		this.holidaysCalendar = holidaysCalendar;
	}

	public EmployeeFullOut maritalStatus(MaritalStatusEnum maritalStatus) {
		this.maritalStatus = maritalStatus;
		return this;
	}

	/**
	 * Martial status
	 *
	 * @return maritalStatus
	 **/
	@Schema(required = true, description = "Martial status")
	public MaritalStatusEnum getMaritalStatus() {
		return maritalStatus;
	}

	public void setMaritalStatus(MaritalStatusEnum maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	public EmployeeFullOut probationEndDate(LocalDate probationEndDate) {
		this.probationEndDate = probationEndDate;
		return this;
	}

	/**
	 * Probation end date
	 *
	 * @return probationEndDate
	 **/
	@Schema(example = "Mon Feb 20 01:00:00 CET 2017", required = true, description = "Probation end date")
	public LocalDate getProbationEndDate() {
		return probationEndDate;
	}

	public void setProbationEndDate(LocalDate probationEndDate) {
		this.probationEndDate = probationEndDate;
	}

	public EmployeeFullOut plannedFiring(LocalDate plannedFiring) {
		this.plannedFiring = plannedFiring;
		return this;
	}

	/**
	 * Planned firing
	 *
	 * @return plannedFiring
	 **/
	@Schema(example = "Mon Feb 20 01:00:00 CET 2017", required = true, description = "Planned firing")
	public LocalDate getPlannedFiring() {
		return plannedFiring;
	}

	public void setPlannedFiring(LocalDate plannedFiring) {
		this.plannedFiring = plannedFiring;
	}

	public EmployeeFullOut seniorityBeforeHireYears(Integer seniorityBeforeHireYears) {
		this.seniorityBeforeHireYears = seniorityBeforeHireYears;
		return this;
	}

	/**
	 * Seniority before hire - years
	 *
	 * @return seniorityBeforeHireYears
	 **/
	@Schema(required = true, description = "Seniority before hire - years")
	public Integer getSeniorityBeforeHireYears() {
		return seniorityBeforeHireYears;
	}

	public void setSeniorityBeforeHireYears(Integer seniorityBeforeHireYears) {
		this.seniorityBeforeHireYears = seniorityBeforeHireYears;
	}

	public EmployeeFullOut seniorityBeforeHireMonths(Integer seniorityBeforeHireMonths) {
		this.seniorityBeforeHireMonths = seniorityBeforeHireMonths;
		return this;
	}

	/**
	 * Seniority before hire - months
	 *
	 * @return seniorityBeforeHireMonths
	 **/
	@Schema(required = true, description = "Seniority before hire - months")
	public Integer getSeniorityBeforeHireMonths() {
		return seniorityBeforeHireMonths;
	}

	public void setSeniorityBeforeHireMonths(Integer seniorityBeforeHireMonths) {
		this.seniorityBeforeHireMonths = seniorityBeforeHireMonths;
	}

	public EmployeeFullOut childrenCount(Integer childrenCount) {
		this.childrenCount = childrenCount;
		return this;
	}

	/**
	 * Number of children
	 *
	 * @return childrenCount
	 **/
	@Schema(required = true, description = "Number of children")
	public Integer getChildrenCount() {
		return childrenCount;
	}

	public void setChildrenCount(Integer childrenCount) {
		this.childrenCount = childrenCount;
	}

	public EmployeeFullOut youngestChildBirthDate(LocalDate youngestChildBirthDate) {
		this.youngestChildBirthDate = youngestChildBirthDate;
		return this;
	}

	/**
	 * The youngest child birth date
	 *
	 * @return youngestChildBirthDate
	 **/
	@Schema(example = "Mon Feb 20 01:00:00 CET 2017", required = true, description = "The youngest child birth date")
	public LocalDate getYoungestChildBirthDate() {
		return youngestChildBirthDate;
	}

	public void setYoungestChildBirthDate(LocalDate youngestChildBirthDate) {
		this.youngestChildBirthDate = youngestChildBirthDate;
	}

	public EmployeeFullOut customNote(String customNote) {
		this.customNote = customNote;
		return this;
	}

	/**
	 * Custom note
	 *
	 * @return customNote
	 **/
	@Schema(example = "Optional custom note", required = true, description = "Custom note")
	public String getCustomNote() {
		return customNote;
	}

	public void setCustomNote(String customNote) {
		this.customNote = customNote;
	}

	public EmployeeFullOut sex(SexEnum sex) {
		this.sex = sex;
		return this;
	}

	/**
	 * Sex
	 *
	 * @return sex
	 **/
	@Schema(required = true, description = "Sex")
	public SexEnum getSex() {
		return sex;
	}

	public void setSex(SexEnum sex) {
		this.sex = sex;
	}

	public EmployeeFullOut archived(Boolean archived) {
		this.archived = archived;
		return this;
	}

	/**
	 * Is employee archived?
	 *
	 * @return archived
	 **/
	@Schema(required = true, description = "Is employee archived?")
	public Boolean isArchived() {
		return archived;
	}

	public void setArchived(Boolean archived) {
		this.archived = archived;
	}

	@Override
	public boolean equals(Object o) {
		if(this == o) {
			return true;
		}
		if(o == null || getClass() != o.getClass()) {
			return false;
		}
		EmployeeFullOut employeeFullOut = (EmployeeFullOut) o;
		return Objects.equals(this.id, employeeFullOut.id) && Objects.equals(this.firstName, employeeFullOut.firstName) && Objects.equals(this.lastName, employeeFullOut.lastName) && Objects.equals(this.email, employeeFullOut.email) && Objects.equals(this.externalNumber, employeeFullOut.externalNumber) && Objects.equals(this.workingWeek, employeeFullOut.workingWeek) && Objects.equals(this.approvalFlow, employeeFullOut.approvalFlow) && Objects.equals(this.position, employeeFullOut.position) && Objects.equals(this.teams, employeeFullOut.teams) && Objects.equals(this.admin, employeeFullOut.admin) && Objects.equals(this.contractType, employeeFullOut.contractType) && Objects.equals(this.language, employeeFullOut.language) && Objects.equals(this.timezone, employeeFullOut.timezone) && Objects.equals(this.directManager, employeeFullOut.directManager) && Objects.equals(this.birthDate, employeeFullOut.birthDate) && Objects.equals(this.hireDate, employeeFullOut.hireDate) && Objects.equals(this.businessPhone, employeeFullOut.businessPhone) && Objects.equals(this.homePhone, employeeFullOut.homePhone) && Objects.equals(this.personalEmail, employeeFullOut.personalEmail) && Objects.equals(this.addressStreet, employeeFullOut.addressStreet) && Objects.equals(this.addressNumber, employeeFullOut.addressNumber) && Objects.equals(this.addressCity, employeeFullOut.addressCity) && Objects.equals(this.addressPostalCode, employeeFullOut.addressPostalCode) && Objects.equals(this.addressProvinceState, employeeFullOut.addressProvinceState) && Objects.equals(this.addressCountry, employeeFullOut.addressCountry) && Objects.equals(this.emergencyContactName, employeeFullOut.emergencyContactName) && Objects.equals(this.emergencyContactRelationship, employeeFullOut.emergencyContactRelationship) && Objects.equals(this.emergencyContactPhone, employeeFullOut.emergencyContactPhone) && Objects.equals(this.holidaysCalendar, employeeFullOut.holidaysCalendar) && Objects.equals(this.maritalStatus, employeeFullOut.maritalStatus) && Objects.equals(this.probationEndDate, employeeFullOut.probationEndDate) && Objects.equals(this.plannedFiring, employeeFullOut.plannedFiring) && Objects.equals(this.seniorityBeforeHireYears, employeeFullOut.seniorityBeforeHireYears) && Objects.equals(this.seniorityBeforeHireMonths, employeeFullOut.seniorityBeforeHireMonths) && Objects.equals(this.childrenCount, employeeFullOut.childrenCount) && Objects.equals(this.youngestChildBirthDate, employeeFullOut.youngestChildBirthDate) && Objects.equals(this.customNote, employeeFullOut.customNote) && Objects.equals(this.sex, employeeFullOut.sex) && Objects.equals(this.archived, employeeFullOut.archived);
	}

	@Override
	public int hashCode() {
		return Objects.hash(id, firstName, lastName, email, externalNumber, workingWeek, approvalFlow, position, teams, admin, contractType, language, timezone, directManager, birthDate, hireDate, businessPhone, homePhone, personalEmail, addressStreet, addressNumber, addressCity, addressPostalCode, addressProvinceState, addressCountry, emergencyContactName, emergencyContactRelationship, emergencyContactPhone, holidaysCalendar, maritalStatus, probationEndDate, plannedFiring, seniorityBeforeHireYears, seniorityBeforeHireMonths, childrenCount, youngestChildBirthDate, customNote, sex, archived);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class EmployeeFullOut {\n");

		sb.append("    id: ").append(toIndentedString(id)).append("\n");
		sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
		sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
		sb.append("    email: ").append(toIndentedString(email)).append("\n");
		sb.append("    externalNumber: ").append(toIndentedString(externalNumber)).append("\n");
		sb.append("    workingWeek: ").append(toIndentedString(workingWeek)).append("\n");
		sb.append("    approvalFlow: ").append(toIndentedString(approvalFlow)).append("\n");
		sb.append("    position: ").append(toIndentedString(position)).append("\n");
		sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
		sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
		sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
		sb.append("    language: ").append(toIndentedString(language)).append("\n");
		sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
		sb.append("    directManager: ").append(toIndentedString(directManager)).append("\n");
		sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
		sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
		sb.append("    businessPhone: ").append(toIndentedString(businessPhone)).append("\n");
		sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
		sb.append("    personalEmail: ").append(toIndentedString(personalEmail)).append("\n");
		sb.append("    addressStreet: ").append(toIndentedString(addressStreet)).append("\n");
		sb.append("    addressNumber: ").append(toIndentedString(addressNumber)).append("\n");
		sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
		sb.append("    addressPostalCode: ").append(toIndentedString(addressPostalCode)).append("\n");
		sb.append("    addressProvinceState: ").append(toIndentedString(addressProvinceState)).append("\n");
		sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
		sb.append("    emergencyContactName: ").append(toIndentedString(emergencyContactName)).append("\n");
		sb.append("    emergencyContactRelationship: ").append(toIndentedString(emergencyContactRelationship)).append("\n");
		sb.append("    emergencyContactPhone: ").append(toIndentedString(emergencyContactPhone)).append("\n");
		sb.append("    holidaysCalendar: ").append(toIndentedString(holidaysCalendar)).append("\n");
		sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
		sb.append("    probationEndDate: ").append(toIndentedString(probationEndDate)).append("\n");
		sb.append("    plannedFiring: ").append(toIndentedString(plannedFiring)).append("\n");
		sb.append("    seniorityBeforeHireYears: ").append(toIndentedString(seniorityBeforeHireYears)).append("\n");
		sb.append("    seniorityBeforeHireMonths: ").append(toIndentedString(seniorityBeforeHireMonths)).append("\n");
		sb.append("    childrenCount: ").append(toIndentedString(childrenCount)).append("\n");
		sb.append("    youngestChildBirthDate: ").append(toIndentedString(youngestChildBirthDate)).append("\n");
		sb.append("    customNote: ").append(toIndentedString(customNote)).append("\n");
		sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
		sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(Object o) {
		if(o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/**
	 * Martial status
	 */
	@JsonAdapter(MaritalStatusEnum.Adapter.class)
	public enum MaritalStatusEnum {
		SINGLE("SINGLE"), MARRIED("MARRIED"), WIDOWED("WIDOWED"), SEPARATED("SEPARATED"), DIVORCED("DIVORCED"), NOT_SET("NOT_SET");

		private String value;

		MaritalStatusEnum(String value) {
			this.value = value;
		}

		public static MaritalStatusEnum fromValue(String input) {
			for(MaritalStatusEnum b : MaritalStatusEnum.values()) {
				if(b.value.equals(input)) {
					return b;
				}
			}
			return null;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<MaritalStatusEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final MaritalStatusEnum enumeration) throws IOException {
				jsonWriter.value(String.valueOf(enumeration.getValue()));
			}

			@Override
			public MaritalStatusEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return MaritalStatusEnum.fromValue((String) (value));
			}
		}
	}

	/**
	 * Sex
	 */
	@JsonAdapter(SexEnum.Adapter.class)
	public enum SexEnum {
		MALE("MALE"), FEMALE("FEMALE"), OTHER("OTHER"), NOT_SET("NOT_SET");

		private String value;

		SexEnum(String value) {
			this.value = value;
		}

		public static SexEnum fromValue(String input) {
			for(SexEnum b : SexEnum.values()) {
				if(b.value.equals(input)) {
					return b;
				}
			}
			return null;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static class Adapter extends TypeAdapter<SexEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final SexEnum enumeration) throws IOException {
				jsonWriter.value(String.valueOf(enumeration.getValue()));
			}

			@Override
			public SexEnum read(final JsonReader jsonReader) throws IOException {
				Object value = jsonReader.nextString();
				return SexEnum.fromValue((String) (value));
			}
		}
	}

}
