/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api;

import com.google.gson.reflect.TypeToken;
import com.thecodest.slack.holidayreminder.calamari.remote.ApiCallback;
import com.thecodest.slack.holidayreminder.calamari.remote.ApiClient;
import com.thecodest.slack.holidayreminder.calamari.remote.ApiException;
import com.thecodest.slack.holidayreminder.calamari.remote.ApiResponse;
import com.thecodest.slack.holidayreminder.calamari.remote.Configuration;
import com.thecodest.slack.holidayreminder.calamari.remote.Pair;
import com.thecodest.slack.holidayreminder.calamari.remote.ProgressRequestBody;
import com.thecodest.slack.holidayreminder.calamari.remote.ProgressResponseBody;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.CreateEmployeeOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.EmployeesOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.InvitationEmployeeIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PublicArchiveEmployeeIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PublicCreateEmployeeIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PublicEditEmployeeIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PublicEmployeesIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PublicSearchEmployeesIn;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmployeesApi {
	private ApiClient apiClient;

	public EmployeesApi() {
		this(Configuration.getDefaultApiClient());
	}

	public EmployeesApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for createEmployee
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call createEmployeeCall(PublicCreateEmployeeIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/employees/v1/create";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call createEmployeeValidateBeforeCall(PublicCreateEmployeeIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = createEmployeeCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Create employee.
	 * Create employee.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_FIRST_NAME&lt;/strong&gt; -
	 * when first name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_LAST_NAME&lt;/strong&gt; -
	 * when last name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMAIL&lt;/strong&gt; - when
	 * email name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when working week is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_ACCEPTANCE_FLOW&lt;/strong&gt;
	 * - when acceptance flow is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_HOLIDAYS_CALENDAR&lt;/strong&gt;
	 * - when holidays calendar is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_SEX&lt;/strong&gt; - when
	 * sex is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_MARTIAL_STATUS&lt;/strong&gt;
	 * - when martial status is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when working week is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when
	 * one of provided teams is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_POSITION&lt;/strong&gt; -
	 * when one of provided positions is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_CONTRACT_TYPE&lt;/strong&gt;
	 * - when contract type is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_DIRECT_MANAGER&lt;/strong&gt;
	 * - when invalid direct manager id is provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return CreateEmployeeOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public CreateEmployeeOut createEmployee(PublicCreateEmployeeIn body) throws ApiException {
		ApiResponse<CreateEmployeeOut> resp = createEmployeeWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Create employee.
	 * Create employee.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_FIRST_NAME&lt;/strong&gt; -
	 * when first name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_LAST_NAME&lt;/strong&gt; -
	 * when last name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMAIL&lt;/strong&gt; - when
	 * email name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when working week is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_ACCEPTANCE_FLOW&lt;/strong&gt;
	 * - when acceptance flow is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_HOLIDAYS_CALENDAR&lt;/strong&gt;
	 * - when holidays calendar is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_SEX&lt;/strong&gt; - when
	 * sex is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_MARTIAL_STATUS&lt;/strong&gt;
	 * - when martial status is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when working week is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when
	 * one of provided teams is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_POSITION&lt;/strong&gt; -
	 * when one of provided positions is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_CONTRACT_TYPE&lt;/strong&gt;
	 * - when contract type is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_DIRECT_MANAGER&lt;/strong&gt;
	 * - when invalid direct manager id is provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;CreateEmployeeOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<CreateEmployeeOut> createEmployeeWithHttpInfo(PublicCreateEmployeeIn body) throws ApiException {
		com.squareup.okhttp.Call call = createEmployeeValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<CreateEmployeeOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Create employee. (asynchronously)
	 * Create employee.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_FIRST_NAME&lt;/strong&gt; -
	 * when first name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_LAST_NAME&lt;/strong&gt; -
	 * when last name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMAIL&lt;/strong&gt; - when
	 * email name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when working week is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_ACCEPTANCE_FLOW&lt;/strong&gt;
	 * - when acceptance flow is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_HOLIDAYS_CALENDAR&lt;/strong&gt;
	 * - when holidays calendar is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_SEX&lt;/strong&gt; - when
	 * sex is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_MARTIAL_STATUS&lt;/strong&gt;
	 * - when martial status is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when working week is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when
	 * one of provided teams is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_POSITION&lt;/strong&gt; -
	 * when one of provided positions is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_CONTRACT_TYPE&lt;/strong&gt;
	 * - when contract type is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_DIRECT_MANAGER&lt;/strong&gt;
	 * - when invalid direct manager id is provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call createEmployeeAsync(PublicCreateEmployeeIn body,
			final ApiCallback<CreateEmployeeOut> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = createEmployeeValidateBeforeCall(body, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<CreateEmployeeOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for editEmployee
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call editEmployeeCall(PublicEditEmployeeIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/employees/v1/edit";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call editEmployeeValidateBeforeCall(PublicEditEmployeeIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = editEmployeeCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Edit employee.
	 * Edit employee.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_FIRST_NAME&lt;/strong&gt;
	 * - when first name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_LAST_NAME&lt;/strong&gt; -
	 * when last name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMAIL&lt;/strong&gt; - when
	 * email is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when provided working week is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_ACCEPTANCE_FLOW&lt;/strong&gt;
	 * - when provided acceptance flow is is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_HOLIDAYS_CALENDAR&lt;/strong&gt;
	 * - when provided holidays calendar is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_SEX&lt;/strong&gt; - when
	 * provided sex is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_MARITAL_STATUS&lt;/strong&gt;
	 * - when provided marital status is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when provided working week is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when
	 * one of provided teams is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_POSITION&lt;/strong&gt; -
	 * when one of provided positions is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_CONTRACT_TYPE&lt;/strong&gt;
	 * - when contract type is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_PERSONAL_EMAIL&lt;/strong&gt;
	 * - when personal email is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_DIRECT_MANAGER&lt;/strong&gt;
	 * - when invalid direct manager is provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return CreateEmployeeOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public CreateEmployeeOut editEmployee(PublicEditEmployeeIn body) throws ApiException {
		ApiResponse<CreateEmployeeOut> resp = editEmployeeWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Edit employee.
	 * Edit employee.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_FIRST_NAME&lt;/strong&gt;
	 * - when first name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_LAST_NAME&lt;/strong&gt; -
	 * when last name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMAIL&lt;/strong&gt; - when
	 * email is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when provided working week is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_ACCEPTANCE_FLOW&lt;/strong&gt;
	 * - when provided acceptance flow is is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_HOLIDAYS_CALENDAR&lt;/strong&gt;
	 * - when provided holidays calendar is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_SEX&lt;/strong&gt; - when
	 * provided sex is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_MARITAL_STATUS&lt;/strong&gt;
	 * - when provided marital status is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when provided working week is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when
	 * one of provided teams is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_POSITION&lt;/strong&gt; -
	 * when one of provided positions is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_CONTRACT_TYPE&lt;/strong&gt;
	 * - when contract type is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_PERSONAL_EMAIL&lt;/strong&gt;
	 * - when personal email is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_DIRECT_MANAGER&lt;/strong&gt;
	 * - when invalid direct manager is provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;CreateEmployeeOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<CreateEmployeeOut> editEmployeeWithHttpInfo(PublicEditEmployeeIn body) throws ApiException {
		com.squareup.okhttp.Call call = editEmployeeValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<CreateEmployeeOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Edit employee. (asynchronously)
	 * Edit employee.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_FIRST_NAME&lt;/strong&gt;
	 * - when first name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_LAST_NAME&lt;/strong&gt; -
	 * when last name is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMAIL&lt;/strong&gt; - when
	 * email is not provided or is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when provided working week is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_ACCEPTANCE_FLOW&lt;/strong&gt;
	 * - when provided acceptance flow is is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_HOLIDAYS_CALENDAR&lt;/strong&gt;
	 * - when provided holidays calendar is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_SEX&lt;/strong&gt; - when
	 * provided sex is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_MARITAL_STATUS&lt;/strong&gt;
	 * - when provided marital status is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt;
	 * - when provided working week is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when
	 * one of provided teams is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_POSITION&lt;/strong&gt; -
	 * when one of provided positions is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_CONTRACT_TYPE&lt;/strong&gt;
	 * - when contract type is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_PERSONAL_EMAIL&lt;/strong&gt;
	 * - when personal email is
	 * invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_DIRECT_MANAGER&lt;/strong&gt;
	 * - when invalid direct manager is provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call editEmployeeAsync(PublicEditEmployeeIn body,
			final ApiCallback<CreateEmployeeOut> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = editEmployeeValidateBeforeCall(body, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<CreateEmployeeOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for getEmployees
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call getEmployeesCall(PublicEmployeesIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/employees/v1/list";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call getEmployeesValidateBeforeCall(PublicEmployeesIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = getEmployeesCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Get all employees.
	 * Get all employees.
	 *
	 * @param body
	 *            (optional)
	 * @return EmployeesOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public EmployeesOut getEmployees(PublicEmployeesIn body) throws ApiException {
		ApiResponse<EmployeesOut> resp = getEmployeesWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Get all employees.
	 * Get all employees.
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;EmployeesOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<EmployeesOut> getEmployeesWithHttpInfo(PublicEmployeesIn body) throws ApiException {
		com.squareup.okhttp.Call call = getEmployeesValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<EmployeesOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get all employees. (asynchronously)
	 * Get all employees.
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getEmployeesAsync(PublicEmployeesIn body, final ApiCallback<EmployeesOut> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getEmployeesValidateBeforeCall(body, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<EmployeesOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for inviteEmployee
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call inviteEmployeeCall(InvitationEmployeeIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/employees/v1/invite";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"*/*"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call inviteEmployeeValidateBeforeCall(InvitationEmployeeIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = inviteEmployeeCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Invite employee.
	 * Invite employee
	 *
	 * @param body
	 *            (optional)
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public void inviteEmployee(InvitationEmployeeIn body) throws ApiException {
		inviteEmployeeWithHttpInfo(body);
	}

	/**
	 * Invite employee.
	 * Invite employee
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<Void> inviteEmployeeWithHttpInfo(InvitationEmployeeIn body) throws ApiException {
		com.squareup.okhttp.Call call = inviteEmployeeValidateBeforeCall(body, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Invite employee. (asynchronously)
	 * Invite employee
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call inviteEmployeeAsync(InvitationEmployeeIn body, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = inviteEmployeeValidateBeforeCall(body, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for markEmployeeAsArchived
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call markEmployeeAsArchivedCall(PublicArchiveEmployeeIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/employees/v1/archive";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"*/*"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call markEmployeeAsArchivedValidateBeforeCall(PublicArchiveEmployeeIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = markEmployeeAsArchivedCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Mark employee as archived.
	 * Mark employee as archived.
	 *
	 * @param body
	 *            (optional)
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public void markEmployeeAsArchived(PublicArchiveEmployeeIn body) throws ApiException {
		markEmployeeAsArchivedWithHttpInfo(body);
	}

	/**
	 * Mark employee as archived.
	 * Mark employee as archived.
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<Void> markEmployeeAsArchivedWithHttpInfo(PublicArchiveEmployeeIn body) throws ApiException {
		com.squareup.okhttp.Call call = markEmployeeAsArchivedValidateBeforeCall(body, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Mark employee as archived. (asynchronously)
	 * Mark employee as archived.
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call markEmployeeAsArchivedAsync(PublicArchiveEmployeeIn body,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = markEmployeeAsArchivedValidateBeforeCall(body, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for searchEmployees
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call searchEmployeesCall(PublicSearchEmployeesIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/employees/v1/search";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call searchEmployeesValidateBeforeCall(PublicSearchEmployeesIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = searchEmployeesCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Get all employees.
	 * Get all employees.
	 *
	 * @param body
	 *            (optional)
	 * @return EmployeesOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public EmployeesOut searchEmployees(PublicSearchEmployeesIn body) throws ApiException {
		ApiResponse<EmployeesOut> resp = searchEmployeesWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Get all employees.
	 * Get all employees.
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;EmployeesOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<EmployeesOut> searchEmployeesWithHttpInfo(PublicSearchEmployeesIn body) throws ApiException {
		com.squareup.okhttp.Call call = searchEmployeesValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<EmployeesOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get all employees. (asynchronously)
	 * Get all employees.
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call searchEmployeesAsync(PublicSearchEmployeesIn body,
			final ApiCallback<EmployeesOut> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = searchEmployeesValidateBeforeCall(body, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<EmployeesOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
