/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api;

import com.google.gson.reflect.TypeToken;
import com.thecodest.slack.holidayreminder.calamari.remote.ApiCallback;
import com.thecodest.slack.holidayreminder.calamari.remote.ApiClient;
import com.thecodest.slack.holidayreminder.calamari.remote.ApiException;
import com.thecodest.slack.holidayreminder.calamari.remote.ApiResponse;
import com.thecodest.slack.holidayreminder.calamari.remote.Configuration;
import com.thecodest.slack.holidayreminder.calamari.remote.Pair;
import com.thecodest.slack.holidayreminder.calamari.remote.ProgressRequestBody;
import com.thecodest.slack.holidayreminder.calamari.remote.ProgressResponseBody;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.BreakIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.BreakOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.GetBreakTypeOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PersonForBreakTypes;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PunchClockIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PunchClockOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PunchOut;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShiftsAndBreaksApi {
	private ApiClient apiClient;

	public ShiftsAndBreaksApi() {
		this(Configuration.getDefaultApiClient());
	}

	public ShiftsAndBreaksApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for breakStart
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call breakStartCall(BreakIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/clockin/terminal/v1/break-start";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call breakStartValidateBeforeCall(BreakIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = breakStartCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Start employee break.
	 * Start employee break. &lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_BREAK_TYPE&lt;/strong&gt;
	 * - when invalid break type id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return BreakOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public BreakOut breakStart(BreakIn body) throws ApiException {
		ApiResponse<BreakOut> resp = breakStartWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Start employee break.
	 * Start employee break. &lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_BREAK_TYPE&lt;/strong&gt;
	 * - when invalid break type id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;BreakOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<BreakOut> breakStartWithHttpInfo(BreakIn body) throws ApiException {
		com.squareup.okhttp.Call call = breakStartValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<BreakOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Start employee break. (asynchronously)
	 * Start employee break. &lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_BREAK_TYPE&lt;/strong&gt;
	 * - when invalid break type id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call breakStartAsync(BreakIn body, final ApiCallback<BreakOut> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = breakStartValidateBeforeCall(body, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<BreakOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for breakStop
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call breakStopCall(BreakIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/clockin/terminal/v1/break-stop";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call breakStopValidateBeforeCall(BreakIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = breakStopCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Stop employee break.
	 * Stop employee break. &lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_BREAK_TYPE&lt;/strong&gt;
	 * - when invalid break type id provided. You should use get-break-types method
	 * to find properly break type ID
	 * &lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return BreakOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public BreakOut breakStop(BreakIn body) throws ApiException {
		ApiResponse<BreakOut> resp = breakStopWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Stop employee break.
	 * Stop employee break. &lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_BREAK_TYPE&lt;/strong&gt;
	 * - when invalid break type id provided. You should use get-break-types method
	 * to find properly break type ID
	 * &lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;BreakOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<BreakOut> breakStopWithHttpInfo(BreakIn body) throws ApiException {
		com.squareup.okhttp.Call call = breakStopValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<BreakOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Stop employee break. (asynchronously)
	 * Stop employee break. &lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_BREAK_TYPE&lt;/strong&gt;
	 * - when invalid break type id provided. You should use get-break-types method
	 * to find properly break type ID
	 * &lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call breakStopAsync(BreakIn body, final ApiCallback<BreakOut> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = breakStopValidateBeforeCall(body, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<BreakOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for clockIn
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call clockInCall(PunchClockIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/clockin/terminal/v1/clock-in";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call clockInValidateBeforeCall(PunchClockIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = clockInCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Start employees shift.
	 * Start employee shift. If the employee shift has already been started via web
	 * browser, mobile app or any other terminal, the request is ignored and the
	 * method returns status 200.&lt;br /&gt;&lt;br /&gt;Client application should
	 * send request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return PunchOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public PunchOut clockIn(PunchClockIn body) throws ApiException {
		ApiResponse<PunchOut> resp = clockInWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Start employees shift.
	 * Start employee shift. If the employee shift has already been started via web
	 * browser, mobile app or any other terminal, the request is ignored and the
	 * method returns status 200.&lt;br /&gt;&lt;br /&gt;Client application should
	 * send request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;PunchOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<PunchOut> clockInWithHttpInfo(PunchClockIn body) throws ApiException {
		com.squareup.okhttp.Call call = clockInValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<PunchOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Start employees shift. (asynchronously)
	 * Start employee shift. If the employee shift has already been started via web
	 * browser, mobile app or any other terminal, the request is ignored and the
	 * method returns status 200.&lt;br /&gt;&lt;br /&gt;Client application should
	 * send request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call clockInAsync(PunchClockIn body, final ApiCallback<PunchOut> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = clockInValidateBeforeCall(body, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<PunchOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for clockOut
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call clockOutCall(PunchClockOut body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/clockin/terminal/v1/clock-out";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call clockOutValidateBeforeCall(PunchClockOut body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = clockOutCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Finish employees shift.
	 * Stop employee shift. If employee shift is not started in moment of request
	 * the request is ignored.&lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return PunchOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public PunchOut clockOut(PunchClockOut body) throws ApiException {
		ApiResponse<PunchOut> resp = clockOutWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Finish employees shift.
	 * Stop employee shift. If employee shift is not started in moment of request
	 * the request is ignored.&lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;PunchOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<PunchOut> clockOutWithHttpInfo(PunchClockOut body) throws ApiException {
		com.squareup.okhttp.Call call = clockOutValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<PunchOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Finish employees shift. (asynchronously)
	 * Stop employee shift. If employee shift is not started in moment of request
	 * the request is ignored.&lt;br /&gt;&lt;br /&gt;Client application should send
	 * request immediately when event occurs. If there is any problem with
	 * connection or access to API event should be queued in clients side and then
	 * sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this
	 * method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in
	 * Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access
	 * is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call clockOutAsync(PunchClockOut body, final ApiCallback<PunchOut> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = clockOutValidateBeforeCall(body, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<PunchOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for getBreakTypes
	 *
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call getBreakTypesCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/clockin/terminal/v1/get-break-types";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call getBreakTypesValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = getBreakTypesCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Get break types.
	 * Get break types. &lt;br /&gt;&lt;br /&gt;
	 *
	 * @return List&lt;GetBreakTypeOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public List<GetBreakTypeOut> getBreakTypes() throws ApiException {
		ApiResponse<List<GetBreakTypeOut>> resp = getBreakTypesWithHttpInfo();
		return resp.getData();
	}

	/**
	 * Get break types.
	 * Get break types. &lt;br /&gt;&lt;br /&gt;
	 *
	 * @return ApiResponse&lt;List&lt;GetBreakTypeOut&gt;&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<List<GetBreakTypeOut>> getBreakTypesWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = getBreakTypesValidateBeforeCall(null, null);
		Type localVarReturnType = new TypeToken<List<GetBreakTypeOut>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get break types. (asynchronously)
	 * Get break types. &lt;br /&gt;&lt;br /&gt;
	 *
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getBreakTypesAsync(final ApiCallback<List<GetBreakTypeOut>> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getBreakTypesValidateBeforeCall(progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<List<GetBreakTypeOut>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for getBreakTypesForEmployee
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call getBreakTypesForEmployeeCall(PersonForBreakTypes body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/clockin/terminal/v1/get-break-types-for-person";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call getBreakTypesForEmployeeValidateBeforeCall(PersonForBreakTypes body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = getBreakTypesForEmployeeCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Get break types for one person.
	 * Get break types for one person.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return List&lt;GetBreakTypeOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public List<GetBreakTypeOut> getBreakTypesForEmployee(PersonForBreakTypes body) throws ApiException {
		ApiResponse<List<GetBreakTypeOut>> resp = getBreakTypesForEmployeeWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Get break types for one person.
	 * Get break types for one person.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;List&lt;GetBreakTypeOut&gt;&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<List<GetBreakTypeOut>> getBreakTypesForEmployeeWithHttpInfo(PersonForBreakTypes body)
			throws ApiException {
		com.squareup.okhttp.Call call = getBreakTypesForEmployeeValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<List<GetBreakTypeOut>>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Get break types for one person. (asynchronously)
	 * Get break types for one person.&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call getBreakTypesForEmployeeAsync(PersonForBreakTypes body,
			final ApiCallback<List<GetBreakTypeOut>> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = getBreakTypesForEmployeeValidateBeforeCall(body, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<List<GetBreakTypeOut>>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for punch
	 *
	 * @param body
	 *            (optional)
	 * @param progressListener
	 *            Progress listener
	 * @param progressRequestListener
	 *            Progress request listener
	 * @return Call to execute
	 * @throws ApiException
	 *             If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call punchCall(PunchClockIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/clockin/terminal/v1/punch-clock";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = {"application/json"};
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {"application/json"};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[]{"basicAuth"};
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call punchValidateBeforeCall(PunchClockIn body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = punchCall(body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Start or stop employee shift
	 * Method indicates employee go through company&#x27;s doors. Starts shift if
	 * it&#x27;s not started or stops it otherwise.&lt;br /&gt;&lt;br /&gt;Client
	 * application should send request immediately when event occurs. If there is
	 * any problem with connection or access to API event should be queued in
	 * clients side and then sent in order of occurence.&lt;br /&gt;&lt;br
	 * /&gt;Before you can use this method, please:&lt;ol&gt;&lt;li&gt;Configure
	 * &#x27;API Terminal&#x27; in Calamari Clockin configuration
	 * panel&lt;/li&gt;&lt;li&gt;Make sure API access is
	 * enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return PunchOut
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public PunchOut punch(PunchClockIn body) throws ApiException {
		ApiResponse<PunchOut> resp = punchWithHttpInfo(body);
		return resp.getData();
	}

	/**
	 * Start or stop employee shift
	 * Method indicates employee go through company&#x27;s doors. Starts shift if
	 * it&#x27;s not started or stops it otherwise.&lt;br /&gt;&lt;br /&gt;Client
	 * application should send request immediately when event occurs. If there is
	 * any problem with connection or access to API event should be queued in
	 * clients side and then sent in order of occurence.&lt;br /&gt;&lt;br
	 * /&gt;Before you can use this method, please:&lt;ol&gt;&lt;li&gt;Configure
	 * &#x27;API Terminal&#x27; in Calamari Clockin configuration
	 * panel&lt;/li&gt;&lt;li&gt;Make sure API access is
	 * enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @return ApiResponse&lt;PunchOut&gt;
	 * @throws ApiException
	 *             If fail to call the API, e.g. server error or cannot deserialize
	 *             the response body
	 */
	public ApiResponse<PunchOut> punchWithHttpInfo(PunchClockIn body) throws ApiException {
		com.squareup.okhttp.Call call = punchValidateBeforeCall(body, null, null);
		Type localVarReturnType = new TypeToken<PunchOut>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Start or stop employee shift (asynchronously)
	 * Method indicates employee go through company&#x27;s doors. Starts shift if
	 * it&#x27;s not started or stops it otherwise.&lt;br /&gt;&lt;br /&gt;Client
	 * application should send request immediately when event occurs. If there is
	 * any problem with connection or access to API event should be queued in
	 * clients side and then sent in order of occurence.&lt;br /&gt;&lt;br
	 * /&gt;Before you can use this method, please:&lt;ol&gt;&lt;li&gt;Configure
	 * &#x27;API Terminal&#x27; in Calamari Clockin configuration
	 * panel&lt;/li&gt;&lt;li&gt;Make sure API access is
	 * enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error
	 * codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; -
	 * when invalid employee id
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when
	 * invalid event time
	 * provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt;
	 * - no API terminal configured or the employee doesn&#x27;t have access to this
	 * terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @param body
	 *            (optional)
	 * @param callback
	 *            The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException
	 *             If fail to process the API call, e.g. serializing the request
	 *             body object
	 */
	public com.squareup.okhttp.Call punchAsync(PunchClockIn body, final ApiCallback<PunchOut> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = punchValidateBeforeCall(body, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<PunchOut>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
