/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api;

import com.thecodest.slack.holidayreminder.calamari.remote.api.model.BreakIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.BreakOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.GetBreakTypeOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PersonForBreakTypes;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PunchClockIn;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PunchClockOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PunchOut;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.List;


/**
 * API tests for ShiftsAndBreaksApi
 */
@Disabled
public class ShiftsAndBreaksApiTest {

	private final ShiftsAndBreaksApi api = new ShiftsAndBreaksApi();

	/**
	 * Start employee break.
	 * <p>
	 * Start employee break. &lt;br /&gt;&lt;br /&gt;Client application should send request immediately when event occurs. If there is any problem with connection or access to API event should be queued in clients side and then sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; - when invalid employee id provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when invalid event time provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_BREAK_TYPE&lt;/strong&gt; - when invalid break type id provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt; - no API terminal configured or the employee doesn&#x27;t have access to this terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	public void breakStartTest() throws Exception {
		BreakIn body = null;
		BreakOut response = api.breakStart(body);

		// TODO: test validations
	}

	/**
	 * Stop employee break.
	 * <p>
	 * Stop employee break. &lt;br /&gt;&lt;br /&gt;Client application should send request immediately when event occurs. If there is any problem with connection or access to API event should be queued in clients side and then sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; - when invalid employee id provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when invalid event time provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_BREAK_TYPE&lt;/strong&gt; - when invalid break type id provided. You should use get-break-types method to find properly break type ID &lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt; - no API terminal configured or the employee doesn&#x27;t have access to this terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	public void breakStopTest() throws Exception {
		BreakIn body = null;
		BreakOut response = api.breakStop(body);

		// TODO: test validations
	}

	/**
	 * Start employees shift.
	 * <p>
	 * Start employee shift. If the employee shift has already been started via web browser, mobile app or any other terminal, the request is ignored and the method returns status 200.&lt;br /&gt;&lt;br /&gt;Client application should send request immediately when event occurs. If there is any problem with connection or access to API event should be queued in clients side and then sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; - when invalid employee id provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when invalid event time provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt; - no API terminal configured or the employee doesn&#x27;t have access to this terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	public void clockInTest() throws Exception {
		PunchClockIn body = null;
		PunchOut response = api.clockIn(body);

		// TODO: test validations
	}

	/**
	 * Finish employees shift.
	 * <p>
	 * Stop employee shift. If employee shift is not started in moment of request the request is ignored.&lt;br /&gt;&lt;br /&gt;Client application should send request immediately when event occurs. If there is any problem with connection or access to API event should be queued in clients side and then sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; - when invalid employee id provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when invalid event time provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt; - no API terminal configured or the employee doesn&#x27;t have access to this terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	public void clockOutTest() throws Exception {
		PunchClockOut body = null;
		PunchOut response = api.clockOut(body);

		// TODO: test validations
	}

	/**
	 * Get break types.
	 * <p>
	 * Get break types. &lt;br /&gt;&lt;br /&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	public void getBreakTypesTest() throws Exception {
		List<GetBreakTypeOut> response = api.getBreakTypes();

		// TODO: test validations
	}

	/**
	 * Get break types for one person.
	 * <p>
	 * Get break types for one person.&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; - when invalid employee id provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	public void getBreakTypesForEmployeeTest() throws Exception {
		PersonForBreakTypes body = null;
		List<GetBreakTypeOut> response = api.getBreakTypesForEmployee(body);

		// TODO: test validations
	}

	/**
	 * Start or stop employee shift
	 * <p>
	 * Method indicates employee go through company&#x27;s doors. Starts shift if it&#x27;s not started or stops it otherwise.&lt;br /&gt;&lt;br /&gt;Client application should send request immediately when event occurs. If there is any problem with connection or access to API event should be queued in clients side and then sent in order of occurence.&lt;br /&gt;&lt;br /&gt;Before you can use this method, please:&lt;ol&gt;&lt;li&gt;Configure &#x27;API Terminal&#x27; in Calamari Clockin configuration panel&lt;/li&gt;&lt;li&gt;Make sure API access is enabled&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; - when invalid employee id provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TIME&lt;/strong&gt; - when invalid event time provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;API_TERMINAL_NOT_AVAILABLE&lt;/strong&gt; - no API terminal configured or the employee doesn&#x27;t have access to this terminal&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	public void punchTest() throws Exception {
		PunchClockIn body = null;
		PunchOut response = api.punch(body);

		// TODO: test validations
	}
}
