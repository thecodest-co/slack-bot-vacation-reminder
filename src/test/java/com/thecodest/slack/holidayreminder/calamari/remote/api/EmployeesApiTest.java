/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api;

import com.thecodest.slack.holidayreminder.calamari.remote.api.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * API tests for EmployeesApi
 */
@Disabled
class EmployeesApiTest {

	private final EmployeesApi api = new EmployeesApi();

	/**
	 * Create employee.
	 * <p>
	 * Create employee.&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_FIRST_NAME&lt;/strong&gt; - when first name is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_LAST_NAME&lt;/strong&gt; - when last name is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMAIL&lt;/strong&gt; - when email name is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt; - when working week is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_ACCEPTANCE_FLOW&lt;/strong&gt; - when acceptance flow is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_HOLIDAYS_CALENDAR&lt;/strong&gt; - when holidays calendar is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_SEX&lt;/strong&gt; - when sex is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_MARTIAL_STATUS&lt;/strong&gt; - when martial status is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt; - when working week is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when one of provided teams is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_POSITION&lt;/strong&gt; - when one of provided positions is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_CONTRACT_TYPE&lt;/strong&gt; - when contract type is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_DIRECT_MANAGER&lt;/strong&gt; - when invalid direct manager id is provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void createEmployeeTest() throws Exception {
		PublicCreateEmployeeIn body = null;
		CreateEmployeeOut response = api.createEmployee(body);

		// TODO: test validations
	}

	/**
	 * Edit employee.
	 * <p>
	 * Edit employee.&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; - when invalid employee id provided&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_FIRST_NAME&lt;/strong&gt; - when first name is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_LAST_NAME&lt;/strong&gt; - when last name is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMAIL&lt;/strong&gt; - when email is not provided or is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt; - when provided working week is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_ACCEPTANCE_FLOW&lt;/strong&gt; - when provided acceptance flow is is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_HOLIDAYS_CALENDAR&lt;/strong&gt; - when provided holidays calendar is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_SEX&lt;/strong&gt; - when provided sex is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_MARITAL_STATUS&lt;/strong&gt; - when provided marital status is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_WORKING_WEEK&lt;/strong&gt; - when provided working week is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when one of provided teams is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_POSITION&lt;/strong&gt; - when one of provided positions is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_CONTRACT_TYPE&lt;/strong&gt; - when contract type is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_PERSONAL_EMAIL&lt;/strong&gt; - when personal email is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_DIRECT_MANAGER&lt;/strong&gt; - when invalid direct manager is provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void editEmployeeTest() throws Exception {
		PublicEditEmployeeIn body = null;
		CreateEmployeeOut response = api.editEmployee(body);

		// TODO: test validations
	}

	/**
	 * Get all employees.
	 * <p>
	 * Get all employees.
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void getEmployeesTest() throws Exception {
		PublicEmployeesIn body = null;
		EmployeesOut response = api.getEmployees(body);

		// TODO: test validations
	}

	/**
	 * Invite employee.
	 * <p>
	 * Invite employee
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void inviteEmployeeTest() throws Exception {
		InvitationEmployeeIn body = null;
		api.inviteEmployee(body);

		// TODO: test validations
	}

	/**
	 * Mark employee as archived.
	 * <p>
	 * Mark employee as archived.
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void markEmployeeAsArchivedTest() throws Exception {
		PublicArchiveEmployeeIn body = null;
		api.markEmployeeAsArchived(body);

		// TODO: test validations
	}

	/**
	 * Get all employees.
	 * <p>
	 * Get all employees.
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void searchEmployeesTest() throws Exception {
		PublicSearchEmployeesIn body = null;
		EmployeesOut response = api.searchEmployees(body);

		// TODO: test validations
	}
}
