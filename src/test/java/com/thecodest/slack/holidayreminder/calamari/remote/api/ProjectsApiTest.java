/*
 * Calamari API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * Contact: developers@calamari.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.thecodest.slack.holidayreminder.calamari.remote.api;

import com.thecodest.slack.holidayreminder.calamari.remote.api.model.PersonForProjects;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.ProjectOut;
import com.thecodest.slack.holidayreminder.calamari.remote.api.model.ProjectOutWithAssignedEmployeesTeams;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * API tests for ProjectsApi
 */
@Disabled
class ProjectsApiTest {

	private final ProjectsApi api = new ProjectsApi();

	/**
	 * Archive project type.
	 * <p>
	 * Archive project type.&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_PROJECT&lt;/strong&gt; - provided project id is invalid&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void archiveProjectTypeTest() throws Exception {
		ProjectOut response = api.archiveProjectType();

		// TODO: test validations
	}

	/**
	 * Create project type.
	 * <p>
	 * Create project type.&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_PERSON&lt;/strong&gt; - when one of provided persons is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when one of provided teams is invalid&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void createProjectTypeTest() throws Exception {
		ProjectOutWithAssignedEmployeesTeams response = api.createProjectType();

		// TODO: test validations
	}

	/**
	 * Get project types for one person.
	 * <p>
	 * Get project types for one person.&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_EMPLOYEE&lt;/strong&gt; - when invalid employee id provided&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void getProjectForEmployeeTest() throws Exception {
		PersonForProjects body = null;
		List<ProjectOut> response = api.getProjectForEmployee(body);

		// TODO: test validations
	}

	/**
	 * Get project types.
	 * <p>
	 * Get project types.
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void getProjectsTest() throws Exception {
		List<ProjectOut> response = api.getProjects();

		// TODO: test validations
	}

	/**
	 * Update project type.
	 * <p>
	 * Update project type.&lt;br /&gt;&lt;br /&gt;Expect error codes:&lt;ol&gt;&lt;li&gt;&lt;strong&gt;INVALID_PERSON&lt;/strong&gt; - when one of provided persons is invalid&lt;/li&gt;&lt;li&gt;&lt;strong&gt;INVALID_TEAM&lt;/strong&gt; - when one of provided teams is invalid&lt;/li&gt;&lt;/ol&gt;
	 *
	 * @throws Exception if the Api call fails
	 */
	@Test
	void updateProjectTypeTest() throws Exception {
		ProjectOutWithAssignedEmployeesTeams response = api.updateProjectType();

		// TODO: test validations
	}
}
